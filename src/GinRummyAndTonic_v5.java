import java.io.File;
import java.io.PrintWriter;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Random;
import java.util.Scanner;
import java.util.Set;
import java.util.stream.Collectors;



/**
 * Class containing the player
 */
public class GinRummyAndTonic_v5 implements GinRummyPlayer {

    // TODO: Tune these parameters
    static int MAX_DISCARDS_TO_CONSIDER = 6;
    static int MAX_DEADWOOD_DIFFERENCE = 8;
    static int EXTRAPOLATE_TO_TURNS = 8;
    static boolean USE_MODIFIED_DRAW = true;
    static double DEADWOOD_W = 1.65;

    final static int[] countTurns = {18149,18332,18169,17748,17389,16822,15964,14673,13021,11074,8983,7022,5213,3705,2483,1536,755,223,33,4,0};

    // <editor-fold desc="Instance Variables">
    /**
     * The number assigned to our player
     */
    private int playerNum;

    /**
     * prng
     */
    private Random random = new Random();

    /**
     * Becomes true if opponent has knocked.
     */
    private boolean opponentKnocked = false;

    /**
     * The id of the card which was drawn
     */
    private int drawn;

    /**
     * The current state of the game
     */
    private State state;

    /**
     * Parameters used for different decision points
     */
    private GeneralStrategy generalStrategy;

    /**
     * If the opponent knocks, this is what their final meld set is
     */
    private ArrayList<ArrayList<Card>> oppMelds;
    // </editor-fold>

    public GinRummyAndTonic_v5() {
        HashMap<String, Double> knockStrat = new HashMap<String, Double>() {
            {
                put("9_49_9", 0.000);
                put("9_49_8", 0.000);
                put("9_49_7", 0.000);
                put("9_49_6", 0.000);
                put("9_49_5", 0.000);
                put("9_49_4", 0.000);
                put("9_49_3", 0.000);
                put("9_49_2", 0.001);
                put("9_49_10", 0.000);
                put("9_49_1", 0.002);
                put("9_48_9", 0.000);
                put("9_48_8", 0.000);
                put("9_48_7", 0.000);
                put("9_48_6", 0.000);
                put("9_48_5", 0.000);
                put("9_48_4", 0.000);
                put("9_48_3", 0.001);
                put("9_48_2", 0.001);
                put("9_48_10", 0.000);
                put("9_48_1", 0.001);
                put("9_47_9", 0.000);
                put("9_47_8", 0.000);
                put("9_47_7", 0.000);
                put("9_47_6", 0.000);
                put("9_47_5", 0.000);
                put("9_47_4", 0.000);
                put("9_47_3", 0.000);
                put("9_47_2", 0.001);
                put("9_47_10", 0.000);
                put("9_47_1", 0.002);
                put("9_46_9", 0.000);
                put("9_46_8", 0.000);
                put("9_46_7", 0.000);
                put("9_46_6", 0.000);
                put("9_46_5", 0.000);
                put("9_46_4", 0.000);
                put("9_46_3", 0.000);
                put("9_46_2", 0.000);
                put("9_46_10", 0.000);
                put("9_46_1", 0.000);
                put("9_45_9", 0.000);
                put("9_45_8", 0.000);
                put("9_45_7", 0.000);
                put("9_45_6", 0.000);
                put("9_45_5", 0.000);
                put("9_45_4", 0.000);
                put("9_45_3", 0.000);
                put("9_45_2", 0.000);
                put("9_45_10", 0.000);
                put("9_45_1", 0.003);
                put("9_44_9", 0.000);
                put("9_44_8", 0.000);
                put("9_44_7", 0.000);
                put("9_44_6", 0.000);
                put("9_44_5", 0.000);
                put("9_44_4", 0.000);
                put("9_44_3", 0.000);
                put("9_44_2", 0.000);
                put("9_44_10", 0.000);
                put("9_44_1", 0.001);
                put("9_43_9", 0.000);
                put("9_43_8", 0.000);
                put("9_43_7", 0.000);
                put("9_43_6", 0.000);
                put("9_43_5", 0.000);
                put("9_43_4", 0.000);
                put("9_43_3", 0.000);
                put("9_43_2", 0.000);
                put("9_43_10", 0.000);
                put("9_43_1", 0.001);
                put("9_42_9", 0.000);
                put("9_42_8", 0.000);
                put("9_42_7", 0.000);
                put("9_42_6", 0.000);
                put("9_42_5", 0.000);
                put("9_42_4", 0.000);
                put("9_42_3", 0.000);
                put("9_42_2", 0.000);
                put("9_42_10", 0.000);
                put("9_42_1", 0.001);
                put("9_41_9", 0.000);
                put("9_41_8", 0.000);
                put("9_41_7", 0.000);
                put("9_41_6", 0.000);
                put("9_41_5", 0.000);
                put("9_41_4", 0.000);
                put("9_41_3", 0.000);
                put("9_41_2", 0.000);
                put("9_41_10", 0.000);
                put("9_41_1", 0.001);
                put("9_40_9", 0.000);
                put("9_40_8", 0.000);
                put("9_40_7", 0.000);
                put("9_40_6", 0.000);
                put("9_40_5", 0.000);
                put("9_40_4", 0.000);
                put("9_40_3", 0.000);
                put("9_40_2", 0.000);
                put("9_40_10", 0.000);
                put("9_40_1", 0.000);
                put("9_39_9", 0.000);
                put("9_39_8", 0.000);
                put("9_39_7", 0.000);
                put("9_39_6", 0.000);
                put("9_39_5", 0.000);
                put("9_39_4", 0.000);
                put("9_39_3", 0.000);
                put("9_39_2", 0.000);
                put("9_39_10", 0.000);
                put("9_39_1", 0.000);
                put("9_38_9", 0.000);
                put("9_38_8", 0.000);
                put("9_38_7", 0.000);
                put("9_38_6", 0.000);
                put("9_38_5", 0.000);
                put("9_38_4", 0.000);
                put("9_38_3", 0.000);
                put("9_38_2", 0.000);
                put("9_38_10", 0.000);
                put("9_38_1", 0.000);
                put("9_37_9", 0.000);
                put("9_37_8", 0.000);
                put("9_37_7", 0.000);
                put("9_37_6", 0.000);
                put("9_37_5", 0.000);
                put("9_37_4", 0.000);
                put("9_37_3", 0.000);
                put("9_37_2", 0.000);
                put("9_37_10", 0.000);
                put("9_37_1", 0.000);
                put("9_36_9", 0.000);
                put("9_36_8", 0.000);
                put("9_36_7", 0.000);
                put("9_36_6", 0.000);
                put("9_36_5", 0.000);
                put("9_36_4", 0.000);
                put("9_36_3", 0.000);
                put("9_36_2", 0.000);
                put("9_36_10", 0.000);
                put("9_36_1", 0.000);
                put("9_35_9", 0.000);
                put("9_35_8", 0.000);
                put("9_35_7", 0.000);
                put("9_35_6", 0.000);
                put("9_35_5", 0.000);
                put("9_35_4", 0.000);
                put("9_35_3", 0.000);
                put("9_35_2", 0.000);
                put("9_35_10", 0.000);
                put("9_35_1", 0.000);
                put("9_34_9", 0.000);
                put("9_34_8", 0.000);
                put("9_34_7", 0.000);
                put("9_34_6", 0.000);
                put("9_34_5", 0.000);
                put("9_34_4", 0.000);
                put("9_34_3", 0.000);
                put("9_34_2", 0.000);
                put("9_34_10", 0.000);
                put("9_34_1", 0.000);
                put("9_33_9", 0.000);
                put("9_33_8", 0.000);
                put("9_33_7", 0.000);
                put("9_33_6", 0.000);
                put("9_33_5", 0.000);
                put("9_33_4", 0.000);
                put("9_33_3", 0.000);
                put("9_33_2", 0.000);
                put("9_33_10", 0.000);
                put("9_33_1", 0.000);
                put("9_32_9", 0.000);
                put("9_32_8", 0.000);
                put("9_32_7", 0.000);
                put("9_32_6", 0.000);
                put("9_32_5", 0.000);
                put("9_32_4", 0.000);
                put("9_32_3", 0.000);
                put("9_32_2", 0.000);
                put("9_32_10", 0.000);
                put("9_32_1", 0.000);
                put("9_31_9", 0.000);
                put("9_31_8", 0.000);
                put("9_31_7", 0.000);
                put("9_31_6", 0.000);
                put("9_31_5", 0.000);
                put("9_31_4", 0.000);
                put("9_31_3", 0.000);
                put("9_31_2", 0.000);
                put("9_31_10", 0.000);
                put("9_31_1", 0.001);
                put("9_30_9", 0.000);
                put("9_30_8", 0.000);
                put("9_30_7", 0.000);
                put("9_30_6", 0.000);
                put("9_30_5", 0.000);
                put("9_30_4", 0.000);
                put("9_30_3", 0.000);
                put("9_30_2", 0.000);
                put("9_30_10", 0.000);
                put("9_30_1", 0.000);
                put("9_29_9", 0.003);
                put("9_29_8", 0.001);
                put("9_29_7", 0.000);
                put("9_29_6", 0.000);
                put("9_29_5", 0.000);
                put("9_29_4", 0.000);
                put("9_29_3", 0.000);
                put("9_29_2", 0.000);
                put("9_29_10", 1.000);
                put("9_29_1", 0.001);
                put("9_28_9", 0.001);
                put("9_28_8", 0.147);
                put("9_28_7", 0.000);
                put("9_28_6", 0.000);
                put("9_28_5", 0.000);
                put("9_28_4", 0.000);
                put("9_28_3", 0.000);
                put("9_28_2", 0.000);
                put("9_28_10", 0.000);
                put("9_28_1", 0.002);
                put("9_27_9", 0.081);
                put("9_27_8", 0.000);
                put("9_27_7", 0.000);
                put("9_27_6", 0.000);
                put("9_27_5", 0.000);
                put("9_27_4", 0.000);
                put("9_27_3", 0.000);
                put("9_27_2", 0.000);
                put("9_27_10", 0.200);
                put("9_27_1", 0.001);
                put("9_26_9", 0.000);
                put("9_26_8", 0.000);
                put("9_26_7", 0.015);
                put("9_26_6", 0.000);
                put("9_26_5", 0.000);
                put("9_26_4", 0.000);
                put("9_26_3", 0.000);
                put("9_26_2", 0.000);
                put("9_26_10", 0.000);
                put("9_26_1", 0.003);
                put("9_25_9", 0.001);
                put("9_25_8", 0.000);
                put("9_25_7", 0.000);
                put("9_25_6", 0.000);
                put("9_25_5", 0.000);
                put("9_25_4", 0.000);
                put("9_25_3", 0.000);
                put("9_25_2", 0.000);
                put("9_25_10", 0.000);
                put("9_25_1", 0.046);
                put("9_24_9", 0.005);
                put("9_24_8", 0.019);
                put("9_24_7", 0.000);
                put("9_24_6", 0.000);
                put("9_24_5", 0.000);
                put("9_24_4", 0.000);
                put("9_24_3", 0.000);
                put("9_24_2", 0.001);
                put("9_24_10", 0.036);
                put("9_24_1", 0.006);
                put("9_23_9", 1.000);
                put("9_23_8", 0.000);
                put("9_23_7", 0.000);
                put("9_23_6", 0.000);
                put("9_23_5", 0.000);
                put("9_23_4", 0.001);
                put("9_23_3", 0.002);
                put("9_23_2", 0.005);
                put("9_23_10", 0.000);
                put("9_23_1", 0.018);
                put("9_22_9", 0.000);
                put("9_22_8", 0.000);
                put("9_22_7", 0.000);
                put("9_22_6", 0.001);
                put("9_22_5", 0.001);
                put("9_22_4", 0.002);
                put("9_22_3", 0.021);
                put("9_22_2", 0.010);
                put("9_22_10", 0.452);
                put("9_22_1", 0.042);
                put("9_21_9", 0.000);
                put("9_21_8", 0.075);
                put("9_21_7", 0.024);
                put("9_21_6", 0.001);
                put("9_21_5", 0.500);
                put("9_21_4", 0.001);
                put("9_21_3", 0.063);
                put("9_21_2", 0.001);
                put("9_21_10", 1.000);
                put("9_21_1", 0.223);
                put("8_49_9", 0.000);
                put("8_49_8", 0.000);
                put("8_49_7", 0.000);
                put("8_49_6", 0.000);
                put("8_49_5", 0.000);
                put("8_49_4", 0.000);
                put("8_49_3", 0.000);
                put("8_49_2", 0.001);
                put("8_49_10", 0.000);
                put("8_49_1", 0.003);
                put("8_48_9", 0.000);
                put("8_48_8", 0.000);
                put("8_48_7", 0.000);
                put("8_48_6", 0.000);
                put("8_48_5", 0.000);
                put("8_48_4", 0.000);
                put("8_48_3", 0.000);
                put("8_48_2", 0.000);
                put("8_48_10", 0.000);
                put("8_48_1", 0.002);
                put("8_47_9", 0.000);
                put("8_47_8", 0.000);
                put("8_47_7", 0.000);
                put("8_47_6", 0.000);
                put("8_47_5", 0.000);
                put("8_47_4", 0.000);
                put("8_47_3", 0.000);
                put("8_47_2", 0.000);
                put("8_47_10", 0.000);
                put("8_47_1", 0.001);
                put("8_46_9", 0.000);
                put("8_46_8", 0.000);
                put("8_46_7", 0.000);
                put("8_46_6", 0.000);
                put("8_46_5", 0.000);
                put("8_46_4", 0.000);
                put("8_46_3", 0.000);
                put("8_46_2", 0.000);
                put("8_46_10", 0.000);
                put("8_46_1", 0.001);
                put("8_45_9", 0.000);
                put("8_45_8", 0.000);
                put("8_45_7", 0.000);
                put("8_45_6", 0.000);
                put("8_45_5", 0.000);
                put("8_45_4", 0.000);
                put("8_45_3", 0.000);
                put("8_45_2", 0.000);
                put("8_45_10", 0.000);
                put("8_45_1", 0.001);
                put("8_44_9", 0.000);
                put("8_44_8", 0.000);
                put("8_44_7", 0.000);
                put("8_44_6", 0.000);
                put("8_44_5", 0.000);
                put("8_44_4", 0.000);
                put("8_44_3", 0.000);
                put("8_44_2", 0.000);
                put("8_44_10", 0.000);
                put("8_44_1", 0.000);
                put("8_43_9", 0.000);
                put("8_43_8", 0.000);
                put("8_43_7", 0.000);
                put("8_43_6", 0.000);
                put("8_43_5", 0.000);
                put("8_43_4", 0.000);
                put("8_43_3", 0.000);
                put("8_43_2", 0.000);
                put("8_43_10", 0.000);
                put("8_43_1", 0.000);
                put("8_42_9", 0.000);
                put("8_42_8", 0.000);
                put("8_42_7", 0.000);
                put("8_42_6", 0.000);
                put("8_42_5", 0.000);
                put("8_42_4", 0.000);
                put("8_42_3", 0.000);
                put("8_42_2", 0.000);
                put("8_42_10", 0.000);
                put("8_42_1", 0.001);
                put("8_41_9", 0.000);
                put("8_41_8", 0.000);
                put("8_41_7", 0.000);
                put("8_41_6", 0.000);
                put("8_41_5", 0.000);
                put("8_41_4", 0.000);
                put("8_41_3", 0.000);
                put("8_41_2", 0.000);
                put("8_41_10", 0.000);
                put("8_41_1", 0.001);
                put("8_40_9", 0.000);
                put("8_40_8", 0.000);
                put("8_40_7", 0.000);
                put("8_40_6", 0.000);
                put("8_40_5", 0.000);
                put("8_40_4", 0.000);
                put("8_40_3", 0.000);
                put("8_40_2", 0.000);
                put("8_40_10", 0.000);
                put("8_40_1", 0.000);
                put("8_39_9", 0.000);
                put("8_39_8", 0.000);
                put("8_39_7", 0.000);
                put("8_39_6", 0.000);
                put("8_39_5", 0.000);
                put("8_39_4", 0.000);
                put("8_39_3", 0.000);
                put("8_39_2", 0.000);
                put("8_39_10", 0.000);
                put("8_39_1", 0.000);
                put("8_38_9", 0.000);
                put("8_38_8", 0.000);
                put("8_38_7", 0.000);
                put("8_38_6", 0.000);
                put("8_38_5", 0.000);
                put("8_38_4", 0.000);
                put("8_38_3", 0.000);
                put("8_38_2", 0.000);
                put("8_38_10", 0.000);
                put("8_38_1", 0.000);
                put("8_37_9", 0.000);
                put("8_37_8", 0.000);
                put("8_37_7", 0.000);
                put("8_37_6", 0.000);
                put("8_37_5", 0.000);
                put("8_37_4", 0.000);
                put("8_37_3", 0.000);
                put("8_37_2", 0.000);
                put("8_37_10", 0.000);
                put("8_37_1", 0.000);
                put("8_36_9", 0.000);
                put("8_36_8", 0.000);
                put("8_36_7", 0.000);
                put("8_36_6", 0.000);
                put("8_36_5", 0.000);
                put("8_36_4", 0.000);
                put("8_36_3", 0.000);
                put("8_36_2", 0.000);
                put("8_36_10", 0.000);
                put("8_36_1", 0.000);
                put("8_35_9", 0.000);
                put("8_35_8", 0.000);
                put("8_35_7", 0.000);
                put("8_35_6", 0.000);
                put("8_35_5", 0.000);
                put("8_35_4", 0.000);
                put("8_35_3", 0.000);
                put("8_35_2", 0.000);
                put("8_35_10", 0.000);
                put("8_35_1", 0.000);
                put("8_34_9", 0.000);
                put("8_34_8", 0.000);
                put("8_34_7", 0.000);
                put("8_34_6", 0.000);
                put("8_34_5", 0.000);
                put("8_34_4", 0.000);
                put("8_34_3", 0.000);
                put("8_34_2", 0.000);
                put("8_34_10", 0.000);
                put("8_34_1", 0.000);
                put("8_33_9", 0.000);
                put("8_33_8", 0.000);
                put("8_33_7", 0.000);
                put("8_33_6", 0.000);
                put("8_33_5", 0.000);
                put("8_33_4", 0.000);
                put("8_33_3", 0.000);
                put("8_33_2", 0.000);
                put("8_33_10", 0.000);
                put("8_33_1", 0.000);
                put("8_32_9", 0.000);
                put("8_32_8", 0.000);
                put("8_32_7", 0.000);
                put("8_32_6", 0.000);
                put("8_32_5", 0.000);
                put("8_32_4", 0.000);
                put("8_32_3", 0.000);
                put("8_32_2", 0.000);
                put("8_32_10", 0.000);
                put("8_32_1", 0.000);
                put("8_31_9", 0.000);
                put("8_31_8", 0.000);
                put("8_31_7", 0.000);
                put("8_31_6", 0.000);
                put("8_31_5", 0.000);
                put("8_31_4", 0.000);
                put("8_31_3", 0.000);
                put("8_31_2", 0.000);
                put("8_31_10", 0.000);
                put("8_31_1", 0.000);
                put("8_30_9", 0.000);
                put("8_30_8", 0.000);
                put("8_30_7", 0.000);
                put("8_30_6", 0.000);
                put("8_30_5", 0.000);
                put("8_30_4", 0.000);
                put("8_30_3", 0.000);
                put("8_30_2", 0.000);
                put("8_30_10", 0.000);
                put("8_30_1", 0.000);
                put("8_29_9", 0.000);
                put("8_29_8", 0.000);
                put("8_29_7", 0.000);
                put("8_29_6", 0.000);
                put("8_29_5", 0.000);
                put("8_29_4", 0.000);
                put("8_29_3", 0.000);
                put("8_29_2", 0.000);
                put("8_29_10", 0.014);
                put("8_29_1", 0.000);
                put("8_28_9", 0.000);
                put("8_28_8", 0.188);
                put("8_28_7", 0.000);
                put("8_28_6", 0.000);
                put("8_28_5", 0.000);
                put("8_28_4", 0.000);
                put("8_28_3", 0.000);
                put("8_28_2", 0.000);
                put("8_28_10", 0.021);
                put("8_28_1", 0.001);
                put("8_27_9", 0.000);
                put("8_27_8", 1.000);
                put("8_27_7", 0.000);
                put("8_27_6", 0.000);
                put("8_27_5", 0.000);
                put("8_27_4", 0.000);
                put("8_27_3", 0.000);
                put("8_27_2", 0.000);
                put("8_27_10", 0.019);
                put("8_27_1", 0.001);
                put("8_26_9", 0.001);
                put("8_26_8", 0.000);
                put("8_26_7", 0.000);
                put("8_26_6", 0.000);
                put("8_26_5", 0.000);
                put("8_26_4", 0.000);
                put("8_26_3", 0.000);
                put("8_26_2", 0.000);
                put("8_26_10", 0.000);
                put("8_26_1", 0.002);
                put("8_25_9", 0.000);
                put("8_25_8", 0.001);
                put("8_25_7", 0.000);
                put("8_25_6", 0.000);
                put("8_25_5", 0.000);
                put("8_25_4", 0.000);
                put("8_25_3", 0.000);
                put("8_25_2", 0.001);
                put("8_25_10", 0.000);
                put("8_25_1", 0.018);
                put("8_24_9", 0.000);
                put("8_24_8", 0.000);
                put("8_24_7", 0.000);
                put("8_24_6", 0.000);
                put("8_24_5", 0.000);
                put("8_24_4", 0.000);
                put("8_24_3", 0.001);
                put("8_24_2", 0.001);
                put("8_24_10", 1.000);
                put("8_24_1", 0.005);
                put("8_23_9", 0.004);
                put("8_23_8", 0.000);
                put("8_23_7", 0.000);
                put("8_23_6", 0.000);
                put("8_23_5", 0.000);
                put("8_23_4", 0.001);
                put("8_23_3", 0.003);
                put("8_23_2", 0.005);
                put("8_23_10", 0.667);
                put("8_23_1", 0.009);
                put("8_22_9", 0.331);
                put("8_22_8", 0.000);
                put("8_22_7", 0.000);
                put("8_22_6", 0.001);
                put("8_22_5", 0.001);
                put("8_22_4", 0.003);
                put("8_22_3", 0.007);
                put("8_22_2", 0.026);
                put("8_22_10", 0.000);
                put("8_22_1", 0.412);
                put("8_21_9", 0.016);
                put("8_21_8", 0.095);
                put("8_21_7", 0.667);
                put("8_21_6", 0.061);
                put("8_21_5", 0.001);
                put("8_21_4", 0.001);
                put("8_21_3", 0.001);
                put("8_21_2", 0.667);
                put("8_21_10", 0.061);
                put("8_21_1", 0.400);
                put("7_49_9", 0.000);
                put("7_49_8", 0.000);
                put("7_49_7", 0.000);
                put("7_49_6", 0.000);
                put("7_49_5", 0.000);
                put("7_49_4", 0.000);
                put("7_49_3", 0.000);
                put("7_49_2", 0.000);
                put("7_49_10", 0.000);
                put("7_49_1", 0.003);
                put("7_48_9", 0.000);
                put("7_48_8", 0.000);
                put("7_48_7", 0.000);
                put("7_48_6", 0.000);
                put("7_48_5", 0.000);
                put("7_48_4", 0.000);
                put("7_48_3", 0.000);
                put("7_48_2", 0.000);
                put("7_48_10", 0.000);
                put("7_48_1", 0.001);
                put("7_47_9", 0.000);
                put("7_47_8", 0.000);
                put("7_47_7", 0.000);
                put("7_47_6", 0.000);
                put("7_47_5", 0.000);
                put("7_47_4", 0.000);
                put("7_47_3", 0.000);
                put("7_47_2", 0.000);
                put("7_47_10", 0.000);
                put("7_47_1", 0.002);
                put("7_46_9", 0.000);
                put("7_46_8", 0.000);
                put("7_46_7", 0.000);
                put("7_46_6", 0.000);
                put("7_46_5", 0.000);
                put("7_46_4", 0.000);
                put("7_46_3", 0.000);
                put("7_46_2", 0.000);
                put("7_46_10", 0.000);
                put("7_46_1", 0.001);
                put("7_45_9", 0.000);
                put("7_45_8", 0.000);
                put("7_45_7", 0.000);
                put("7_45_6", 0.000);
                put("7_45_5", 0.000);
                put("7_45_4", 0.000);
                put("7_45_3", 0.000);
                put("7_45_2", 0.000);
                put("7_45_10", 0.000);
                put("7_45_1", 0.000);
                put("7_44_9", 0.000);
                put("7_44_8", 0.000);
                put("7_44_7", 0.000);
                put("7_44_6", 0.000);
                put("7_44_5", 0.000);
                put("7_44_4", 0.000);
                put("7_44_3", 0.000);
                put("7_44_2", 0.000);
                put("7_44_10", 0.000);
                put("7_44_1", 0.001);
                put("7_43_9", 0.000);
                put("7_43_8", 0.000);
                put("7_43_7", 0.000);
                put("7_43_6", 0.000);
                put("7_43_5", 0.000);
                put("7_43_4", 0.000);
                put("7_43_3", 0.000);
                put("7_43_2", 0.000);
                put("7_43_10", 0.000);
                put("7_43_1", 0.000);
                put("7_42_9", 0.000);
                put("7_42_8", 0.000);
                put("7_42_7", 0.000);
                put("7_42_6", 0.000);
                put("7_42_5", 0.000);
                put("7_42_4", 0.000);
                put("7_42_3", 0.000);
                put("7_42_2", 0.000);
                put("7_42_10", 0.000);
                put("7_42_1", 0.000);
                put("7_41_9", 0.000);
                put("7_41_8", 0.000);
                put("7_41_7", 0.000);
                put("7_41_6", 0.000);
                put("7_41_5", 0.000);
                put("7_41_4", 0.000);
                put("7_41_3", 0.000);
                put("7_41_2", 0.000);
                put("7_41_10", 0.000);
                put("7_41_1", 0.000);
                put("7_40_9", 0.000);
                put("7_40_8", 0.000);
                put("7_40_7", 0.000);
                put("7_40_6", 0.000);
                put("7_40_5", 0.000);
                put("7_40_4", 0.000);
                put("7_40_3", 0.000);
                put("7_40_2", 0.000);
                put("7_40_10", 0.000);
                put("7_40_1", 0.000);
                put("7_39_9", 0.000);
                put("7_39_8", 0.000);
                put("7_39_7", 0.000);
                put("7_39_6", 0.000);
                put("7_39_5", 0.000);
                put("7_39_4", 0.000);
                put("7_39_3", 0.000);
                put("7_39_2", 0.000);
                put("7_39_10", 0.000);
                put("7_39_1", 0.000);
                put("7_38_9", 0.000);
                put("7_38_8", 0.000);
                put("7_38_7", 0.000);
                put("7_38_6", 0.000);
                put("7_38_5", 0.000);
                put("7_38_4", 0.000);
                put("7_38_3", 0.000);
                put("7_38_2", 0.000);
                put("7_38_10", 0.000);
                put("7_38_1", 0.000);
                put("7_37_9", 0.000);
                put("7_37_8", 0.000);
                put("7_37_7", 0.000);
                put("7_37_6", 0.000);
                put("7_37_5", 0.000);
                put("7_37_4", 0.000);
                put("7_37_3", 0.000);
                put("7_37_2", 0.000);
                put("7_37_10", 0.000);
                put("7_37_1", 0.000);
                put("7_36_9", 0.000);
                put("7_36_8", 0.000);
                put("7_36_7", 0.000);
                put("7_36_6", 0.000);
                put("7_36_5", 0.000);
                put("7_36_4", 0.000);
                put("7_36_3", 0.000);
                put("7_36_2", 0.000);
                put("7_36_10", 0.000);
                put("7_36_1", 0.000);
                put("7_35_9", 0.000);
                put("7_35_8", 0.000);
                put("7_35_7", 0.000);
                put("7_35_6", 0.000);
                put("7_35_5", 0.000);
                put("7_35_4", 0.000);
                put("7_35_3", 0.000);
                put("7_35_2", 0.000);
                put("7_35_10", 0.000);
                put("7_35_1", 0.000);
                put("7_34_9", 0.000);
                put("7_34_8", 0.000);
                put("7_34_7", 0.000);
                put("7_34_6", 0.000);
                put("7_34_5", 0.000);
                put("7_34_4", 0.000);
                put("7_34_3", 0.000);
                put("7_34_2", 0.000);
                put("7_34_10", 0.000);
                put("7_34_1", 0.000);
                put("7_33_9", 0.000);
                put("7_33_8", 0.000);
                put("7_33_7", 0.000);
                put("7_33_6", 0.000);
                put("7_33_5", 0.000);
                put("7_33_4", 0.000);
                put("7_33_3", 0.000);
                put("7_33_2", 0.000);
                put("7_33_10", 0.000);
                put("7_33_1", 0.000);
                put("7_32_9", 0.000);
                put("7_32_8", 0.000);
                put("7_32_7", 0.000);
                put("7_32_6", 0.000);
                put("7_32_5", 0.000);
                put("7_32_4", 0.000);
                put("7_32_3", 0.000);
                put("7_32_2", 0.000);
                put("7_32_10", 0.000);
                put("7_32_1", 0.000);
                put("7_31_9", 0.000);
                put("7_31_8", 0.001);
                put("7_31_7", 0.000);
                put("7_31_6", 0.000);
                put("7_31_5", 0.000);
                put("7_31_4", 0.000);
                put("7_31_3", 0.000);
                put("7_31_2", 0.000);
                put("7_31_10", 0.000);
                put("7_31_1", 0.000);
                put("7_30_9", 0.000);
                put("7_30_8", 0.004);
                put("7_30_7", 0.000);
                put("7_30_6", 0.000);
                put("7_30_5", 0.000);
                put("7_30_4", 0.000);
                put("7_30_3", 0.000);
                put("7_30_2", 0.000);
                put("7_30_10", 0.000);
                put("7_30_1", 0.000);
                put("7_29_9", 0.001);
                put("7_29_8", 0.000);
                put("7_29_7", 0.000);
                put("7_29_6", 0.000);
                put("7_29_5", 0.000);
                put("7_29_4", 0.000);
                put("7_29_3", 0.000);
                put("7_29_2", 0.000);
                put("7_29_10", 0.000);
                put("7_29_1", 0.000);
                put("7_28_9", 0.001);
                put("7_28_8", 0.000);
                put("7_28_7", 0.000);
                put("7_28_6", 0.000);
                put("7_28_5", 0.000);
                put("7_28_4", 0.000);
                put("7_28_3", 0.000);
                put("7_28_2", 0.000);
                put("7_28_10", 0.000);
                put("7_28_1", 0.002);
                put("7_27_9", 0.001);
                put("7_27_8", 0.000);
                put("7_27_7", 0.000);
                put("7_27_6", 0.000);
                put("7_27_5", 0.000);
                put("7_27_4", 0.000);
                put("7_27_3", 0.000);
                put("7_27_2", 0.000);
                put("7_27_10", 0.000);
                put("7_27_1", 0.001);
                put("7_26_9", 0.040);
                put("7_26_8", 0.004);
                put("7_26_7", 0.000);
                put("7_26_6", 0.000);
                put("7_26_5", 0.000);
                put("7_26_4", 0.000);
                put("7_26_3", 0.000);
                put("7_26_2", 0.001);
                put("7_26_10", 0.000);
                put("7_26_1", 0.004);
                put("7_25_9", 1.000);
                put("7_25_8", 0.000);
                put("7_25_7", 0.000);
                put("7_25_6", 0.000);
                put("7_25_5", 0.000);
                put("7_25_4", 0.000);
                put("7_25_3", 0.000);
                put("7_25_2", 0.001);
                put("7_25_10", 0.017);
                put("7_25_1", 0.003);
                put("7_24_9", 0.000);
                put("7_24_8", 0.000);
                put("7_24_7", 0.000);
                put("7_24_6", 0.000);
                put("7_24_5", 0.000);
                put("7_24_4", 0.000);
                put("7_24_3", 0.001);
                put("7_24_2", 0.002);
                put("7_24_10", 1.000);
                put("7_24_1", 0.008);
                put("7_23_9", 0.000);
                put("7_23_8", 0.741);
                put("7_23_7", 0.000);
                put("7_23_6", 0.000);
                put("7_23_5", 0.001);
                put("7_23_4", 0.001);
                put("7_23_3", 0.003);
                put("7_23_2", 0.007);
                put("7_23_10", 0.000);
                put("7_23_1", 0.031);
                put("7_22_9", 0.008);
                put("7_22_8", 0.000);
                put("7_22_7", 0.001);
                put("7_22_6", 0.001);
                put("7_22_5", 0.001);
                put("7_22_4", 0.004);
                put("7_22_3", 0.008);
                put("7_22_2", 0.017);
                put("7_22_10", 0.361);
                put("7_22_1", 0.384);
                put("7_21_9", 0.001);
                put("7_21_8", 0.001);
                put("7_21_7", 0.001);
                put("7_21_6", 0.001);
                put("7_21_5", 0.001);
                put("7_21_4", 1.000);
                put("7_21_3", 0.001);
                put("7_21_2", 0.001);
                put("7_21_10", 0.000);
                put("7_21_1", 0.001);
                put("6_49_9", 0.000);
                put("6_49_8", 0.000);
                put("6_49_7", 0.000);
                put("6_49_6", 0.000);
                put("6_49_5", 0.000);
                put("6_49_4", 0.000);
                put("6_49_3", 0.000);
                put("6_49_2", 0.000);
                put("6_49_10", 0.000);
                put("6_49_1", 0.001);
                put("6_48_9", 0.000);
                put("6_48_8", 0.000);
                put("6_48_7", 0.000);
                put("6_48_6", 0.000);
                put("6_48_5", 0.000);
                put("6_48_4", 0.000);
                put("6_48_3", 0.000);
                put("6_48_2", 0.000);
                put("6_48_10", 0.000);
                put("6_48_1", 0.001);
                put("6_47_9", 0.000);
                put("6_47_8", 0.000);
                put("6_47_7", 0.000);
                put("6_47_6", 0.000);
                put("6_47_5", 0.000);
                put("6_47_4", 0.000);
                put("6_47_3", 0.000);
                put("6_47_2", 0.000);
                put("6_47_10", 0.000);
                put("6_47_1", 0.001);
                put("6_46_9", 0.000);
                put("6_46_8", 0.000);
                put("6_46_7", 0.000);
                put("6_46_6", 0.000);
                put("6_46_5", 0.000);
                put("6_46_4", 0.000);
                put("6_46_3", 0.000);
                put("6_46_2", 0.000);
                put("6_46_10", 0.000);
                put("6_46_1", 0.000);
                put("6_45_9", 0.000);
                put("6_45_8", 0.000);
                put("6_45_7", 0.000);
                put("6_45_6", 0.000);
                put("6_45_5", 0.000);
                put("6_45_4", 0.000);
                put("6_45_3", 0.000);
                put("6_45_2", 0.000);
                put("6_45_10", 0.000);
                put("6_45_1", 0.001);
                put("6_44_9", 0.000);
                put("6_44_8", 0.000);
                put("6_44_7", 0.000);
                put("6_44_6", 0.000);
                put("6_44_5", 0.000);
                put("6_44_4", 0.000);
                put("6_44_3", 0.000);
                put("6_44_2", 0.000);
                put("6_44_10", 0.000);
                put("6_44_1", 0.000);
                put("6_43_9", 0.000);
                put("6_43_8", 0.000);
                put("6_43_7", 0.000);
                put("6_43_6", 0.000);
                put("6_43_5", 0.000);
                put("6_43_4", 0.000);
                put("6_43_3", 0.000);
                put("6_43_2", 0.000);
                put("6_43_10", 0.000);
                put("6_43_1", 0.000);
                put("6_42_9", 0.000);
                put("6_42_8", 0.000);
                put("6_42_7", 0.000);
                put("6_42_6", 0.000);
                put("6_42_5", 0.000);
                put("6_42_4", 0.000);
                put("6_42_3", 0.000);
                put("6_42_2", 0.000);
                put("6_42_10", 0.000);
                put("6_42_1", 0.000);
                put("6_41_9", 0.000);
                put("6_41_8", 0.000);
                put("6_41_7", 0.000);
                put("6_41_6", 0.000);
                put("6_41_5", 0.000);
                put("6_41_4", 0.000);
                put("6_41_3", 0.000);
                put("6_41_2", 0.000);
                put("6_41_10", 0.000);
                put("6_41_1", 0.000);
                put("6_40_9", 0.000);
                put("6_40_8", 0.000);
                put("6_40_7", 0.000);
                put("6_40_6", 0.000);
                put("6_40_5", 0.000);
                put("6_40_4", 0.000);
                put("6_40_3", 0.000);
                put("6_40_2", 0.000);
                put("6_40_10", 0.000);
                put("6_40_1", 0.000);
                put("6_39_9", 0.000);
                put("6_39_8", 0.000);
                put("6_39_7", 0.000);
                put("6_39_6", 0.000);
                put("6_39_5", 0.000);
                put("6_39_4", 0.000);
                put("6_39_3", 0.000);
                put("6_39_2", 0.000);
                put("6_39_10", 0.000);
                put("6_39_1", 0.000);
                put("6_38_9", 0.000);
                put("6_38_8", 0.000);
                put("6_38_7", 0.000);
                put("6_38_6", 0.000);
                put("6_38_5", 0.000);
                put("6_38_4", 0.000);
                put("6_38_3", 0.000);
                put("6_38_2", 0.000);
                put("6_38_10", 0.000);
                put("6_38_1", 0.000);
                put("6_37_9", 0.000);
                put("6_37_8", 0.000);
                put("6_37_7", 0.000);
                put("6_37_6", 0.000);
                put("6_37_5", 0.000);
                put("6_37_4", 0.000);
                put("6_37_3", 0.000);
                put("6_37_2", 0.000);
                put("6_37_10", 0.000);
                put("6_37_1", 0.000);
                put("6_36_9", 0.000);
                put("6_36_8", 0.000);
                put("6_36_7", 0.000);
                put("6_36_6", 0.000);
                put("6_36_5", 0.000);
                put("6_36_4", 0.000);
                put("6_36_3", 0.000);
                put("6_36_2", 0.000);
                put("6_36_10", 0.000);
                put("6_36_1", 0.000);
                put("6_35_9", 0.000);
                put("6_35_8", 0.000);
                put("6_35_7", 0.000);
                put("6_35_6", 0.000);
                put("6_35_5", 0.000);
                put("6_35_4", 0.000);
                put("6_35_3", 0.000);
                put("6_35_2", 0.000);
                put("6_35_10", 0.000);
                put("6_35_1", 0.000);
                put("6_34_9", 0.000);
                put("6_34_8", 0.000);
                put("6_34_7", 0.000);
                put("6_34_6", 0.000);
                put("6_34_5", 0.000);
                put("6_34_4", 0.000);
                put("6_34_3", 0.000);
                put("6_34_2", 0.000);
                put("6_34_10", 0.000);
                put("6_34_1", 0.000);
                put("6_33_9", 0.000);
                put("6_33_8", 0.000);
                put("6_33_7", 0.000);
                put("6_33_6", 0.000);
                put("6_33_5", 0.000);
                put("6_33_4", 0.000);
                put("6_33_3", 0.000);
                put("6_33_2", 0.000);
                put("6_33_10", 0.000);
                put("6_33_1", 0.000);
                put("6_32_9", 0.000);
                put("6_32_8", 0.000);
                put("6_32_7", 0.000);
                put("6_32_6", 0.000);
                put("6_32_5", 0.000);
                put("6_32_4", 0.000);
                put("6_32_3", 0.000);
                put("6_32_2", 0.000);
                put("6_32_10", 0.000);
                put("6_32_1", 0.000);
                put("6_31_9", 0.000);
                put("6_31_8", 0.000);
                put("6_31_7", 0.002);
                put("6_31_6", 0.000);
                put("6_31_5", 0.000);
                put("6_31_4", 0.000);
                put("6_31_3", 0.000);
                put("6_31_2", 0.000);
                put("6_31_10", 0.000);
                put("6_31_1", 0.000);
                put("6_30_9", 0.667);
                put("6_30_8", 0.000);
                put("6_30_7", 0.000);
                put("6_30_6", 0.000);
                put("6_30_5", 0.000);
                put("6_30_4", 0.000);
                put("6_30_3", 0.000);
                put("6_30_2", 0.000);
                put("6_30_10", 0.000);
                put("6_30_1", 0.000);
                put("6_29_9", 0.000);
                put("6_29_8", 0.004);
                put("6_29_7", 0.000);
                put("6_29_6", 0.000);
                put("6_29_5", 0.000);
                put("6_29_4", 0.000);
                put("6_29_3", 0.000);
                put("6_29_2", 0.000);
                put("6_29_10", 0.000);
                put("6_29_1", 0.001);
                put("6_28_9", 0.002);
                put("6_28_8", 0.000);
                put("6_28_7", 0.000);
                put("6_28_6", 0.000);
                put("6_28_5", 0.000);
                put("6_28_4", 0.000);
                put("6_28_3", 0.000);
                put("6_28_2", 0.000);
                put("6_28_10", 0.000);
                put("6_28_1", 0.001);
                put("6_27_9", 0.000);
                put("6_27_8", 0.255);
                put("6_27_7", 0.000);
                put("6_27_6", 0.000);
                put("6_27_5", 0.000);
                put("6_27_4", 0.000);
                put("6_27_3", 0.000);
                put("6_27_2", 0.000);
                put("6_27_10", 0.147);
                put("6_27_1", 0.001);
                put("6_26_9", 0.007);
                put("6_26_8", 0.000);
                put("6_26_7", 0.000);
                put("6_26_6", 0.000);
                put("6_26_5", 0.000);
                put("6_26_4", 0.000);
                put("6_26_3", 0.000);
                put("6_26_2", 0.001);
                put("6_26_10", 0.030);
                put("6_26_1", 0.005);
                put("6_25_9", 0.000);
                put("6_25_8", 0.022);
                put("6_25_7", 0.000);
                put("6_25_6", 0.000);
                put("6_25_5", 0.000);
                put("6_25_4", 0.000);
                put("6_25_3", 0.000);
                put("6_25_2", 0.001);
                put("6_25_10", 0.000);
                put("6_25_1", 0.003);
                put("6_24_9", 0.005);
                put("6_24_8", 0.000);
                put("6_24_7", 0.000);
                put("6_24_6", 0.000);
                put("6_24_5", 0.000);
                put("6_24_4", 0.000);
                put("6_24_3", 0.001);
                put("6_24_2", 0.002);
                put("6_24_10", 0.000);
                put("6_24_1", 0.012);
                put("6_23_9", 0.000);
                put("6_23_8", 0.000);
                put("6_23_7", 0.000);
                put("6_23_6", 0.000);
                put("6_23_5", 0.001);
                put("6_23_4", 0.001);
                put("6_23_3", 0.003);
                put("6_23_2", 0.112);
                put("6_23_10", 0.157);
                put("6_23_1", 0.027);
                put("6_22_9", 0.000);
                put("6_22_8", 0.000);
                put("6_22_7", 0.085);
                put("6_22_6", 0.001);
                put("6_22_5", 0.002);
                put("6_22_4", 0.003);
                put("6_22_3", 0.021);
                put("6_22_2", 0.083);
                put("6_22_10", 0.039);
                put("6_22_1", 0.259);
                put("6_21_9", 0.500);
                put("6_21_8", 0.001);
                put("6_21_7", 0.001);
                put("6_21_6", 0.004);
                put("6_21_5", 0.001);
                put("6_21_4", 0.002);
                put("6_21_3", 0.002);
                put("6_21_2", 1.000);
                put("6_21_10", 0.000);
                put("6_21_1", 0.106);
                put("5_49_9", 0.000);
                put("5_49_8", 0.000);
                put("5_49_7", 0.000);
                put("5_49_6", 0.000);
                put("5_49_5", 0.000);
                put("5_49_4", 0.000);
                put("5_49_3", 0.000);
                put("5_49_2", 0.000);
                put("5_49_10", 0.000);
                put("5_49_1", 0.000);
                put("5_48_9", 0.000);
                put("5_48_8", 0.000);
                put("5_48_7", 0.000);
                put("5_48_6", 0.000);
                put("5_48_5", 0.000);
                put("5_48_4", 0.000);
                put("5_48_3", 0.000);
                put("5_48_2", 0.000);
                put("5_48_10", 0.000);
                put("5_48_1", 0.001);
                put("5_47_9", 0.000);
                put("5_47_8", 0.000);
                put("5_47_7", 0.000);
                put("5_47_6", 0.000);
                put("5_47_5", 0.000);
                put("5_47_4", 0.000);
                put("5_47_3", 0.000);
                put("5_47_2", 0.000);
                put("5_47_10", 0.000);
                put("5_47_1", 0.000);
                put("5_46_9", 0.000);
                put("5_46_8", 0.000);
                put("5_46_7", 0.000);
                put("5_46_6", 0.000);
                put("5_46_5", 0.000);
                put("5_46_4", 0.000);
                put("5_46_3", 0.000);
                put("5_46_2", 0.000);
                put("5_46_10", 0.000);
                put("5_46_1", 0.000);
                put("5_45_9", 0.000);
                put("5_45_8", 0.000);
                put("5_45_7", 0.000);
                put("5_45_6", 0.000);
                put("5_45_5", 0.000);
                put("5_45_4", 0.000);
                put("5_45_3", 0.000);
                put("5_45_2", 0.000);
                put("5_45_10", 0.000);
                put("5_45_1", 0.000);
                put("5_44_9", 0.000);
                put("5_44_8", 0.000);
                put("5_44_7", 0.000);
                put("5_44_6", 0.000);
                put("5_44_5", 0.000);
                put("5_44_4", 0.000);
                put("5_44_3", 0.000);
                put("5_44_2", 0.000);
                put("5_44_10", 0.000);
                put("5_44_1", 0.000);
                put("5_43_9", 0.000);
                put("5_43_8", 0.000);
                put("5_43_7", 0.000);
                put("5_43_6", 0.000);
                put("5_43_5", 0.000);
                put("5_43_4", 0.000);
                put("5_43_3", 0.000);
                put("5_43_2", 0.000);
                put("5_43_10", 0.000);
                put("5_43_1", 0.000);
                put("5_42_9", 0.000);
                put("5_42_8", 0.000);
                put("5_42_7", 0.000);
                put("5_42_6", 0.000);
                put("5_42_5", 0.000);
                put("5_42_4", 0.000);
                put("5_42_3", 0.000);
                put("5_42_2", 0.000);
                put("5_42_10", 0.000);
                put("5_42_1", 0.000);
                put("5_41_9", 0.000);
                put("5_41_8", 0.000);
                put("5_41_7", 0.000);
                put("5_41_6", 0.000);
                put("5_41_5", 0.000);
                put("5_41_4", 0.000);
                put("5_41_3", 0.000);
                put("5_41_2", 0.000);
                put("5_41_10", 0.000);
                put("5_41_1", 0.000);
                put("5_40_9", 0.000);
                put("5_40_8", 0.000);
                put("5_40_7", 0.000);
                put("5_40_6", 0.000);
                put("5_40_5", 0.000);
                put("5_40_4", 0.000);
                put("5_40_3", 0.000);
                put("5_40_2", 0.000);
                put("5_40_10", 0.000);
                put("5_40_1", 0.000);
                put("5_39_9", 0.000);
                put("5_39_8", 0.000);
                put("5_39_7", 0.000);
                put("5_39_6", 0.000);
                put("5_39_5", 0.000);
                put("5_39_4", 0.000);
                put("5_39_3", 0.000);
                put("5_39_2", 0.000);
                put("5_39_10", 0.000);
                put("5_39_1", 0.000);
                put("5_38_9", 0.000);
                put("5_38_8", 0.000);
                put("5_38_7", 0.000);
                put("5_38_6", 0.000);
                put("5_38_5", 0.000);
                put("5_38_4", 0.000);
                put("5_38_3", 0.000);
                put("5_38_2", 0.000);
                put("5_38_10", 0.000);
                put("5_38_1", 0.000);
                put("5_37_9", 0.000);
                put("5_37_8", 0.000);
                put("5_37_7", 0.000);
                put("5_37_6", 0.000);
                put("5_37_5", 0.000);
                put("5_37_4", 0.000);
                put("5_37_3", 0.000);
                put("5_37_2", 0.000);
                put("5_37_10", 0.000);
                put("5_37_1", 0.000);
                put("5_36_9", 0.000);
                put("5_36_8", 0.000);
                put("5_36_7", 0.000);
                put("5_36_6", 0.000);
                put("5_36_5", 0.000);
                put("5_36_4", 0.000);
                put("5_36_3", 0.000);
                put("5_36_2", 0.000);
                put("5_36_10", 0.000);
                put("5_36_1", 0.000);
                put("5_35_9", 0.000);
                put("5_35_8", 0.000);
                put("5_35_7", 0.000);
                put("5_35_6", 0.000);
                put("5_35_5", 0.000);
                put("5_35_4", 0.000);
                put("5_35_3", 0.000);
                put("5_35_2", 0.000);
                put("5_35_10", 0.000);
                put("5_35_1", 0.000);
                put("5_34_9", 0.000);
                put("5_34_8", 0.000);
                put("5_34_7", 0.000);
                put("5_34_6", 0.000);
                put("5_34_5", 0.000);
                put("5_34_4", 0.000);
                put("5_34_3", 0.000);
                put("5_34_2", 0.000);
                put("5_34_10", 0.000);
                put("5_34_1", 0.000);
                put("5_33_9", 0.000);
                put("5_33_8", 0.000);
                put("5_33_7", 0.000);
                put("5_33_6", 0.000);
                put("5_33_5", 0.000);
                put("5_33_4", 0.000);
                put("5_33_3", 0.000);
                put("5_33_2", 0.000);
                put("5_33_10", 0.000);
                put("5_33_1", 0.000);
                put("5_32_9", 0.000);
                put("5_32_8", 0.000);
                put("5_32_7", 0.000);
                put("5_32_6", 0.000);
                put("5_32_5", 0.000);
                put("5_32_4", 0.000);
                put("5_32_3", 0.000);
                put("5_32_2", 0.000);
                put("5_32_10", 0.000);
                put("5_32_1", 0.000);
                put("5_31_9", 0.000);
                put("5_31_8", 0.000);
                put("5_31_7", 0.000);
                put("5_31_6", 0.000);
                put("5_31_5", 0.000);
                put("5_31_4", 0.000);
                put("5_31_3", 0.000);
                put("5_31_2", 0.000);
                put("5_31_10", 0.000);
                put("5_31_1", 0.000);
                put("5_30_9", 0.000);
                put("5_30_8", 0.000);
                put("5_30_7", 0.000);
                put("5_30_6", 0.000);
                put("5_30_5", 0.000);
                put("5_30_4", 0.000);
                put("5_30_3", 0.000);
                put("5_30_2", 0.000);
                put("5_30_10", 0.000);
                put("5_30_1", 0.000);
                put("5_29_9", 0.000);
                put("5_29_8", 0.000);
                put("5_29_7", 0.000);
                put("5_29_6", 0.000);
                put("5_29_5", 0.000);
                put("5_29_4", 0.000);
                put("5_29_3", 0.000);
                put("5_29_2", 0.000);
                put("5_29_10", 0.000);
                put("5_29_1", 0.000);
                put("5_28_9", 0.000);
                put("5_28_8", 0.000);
                put("5_28_7", 0.000);
                put("5_28_6", 0.000);
                put("5_28_5", 0.000);
                put("5_28_4", 0.000);
                put("5_28_3", 0.000);
                put("5_28_2", 0.000);
                put("5_28_10", 0.000);
                put("5_28_1", 0.002);
                put("5_27_9", 0.000);
                put("5_27_8", 0.000);
                put("5_27_7", 0.000);
                put("5_27_6", 0.000);
                put("5_27_5", 0.000);
                put("5_27_4", 0.000);
                put("5_27_3", 0.000);
                put("5_27_2", 0.000);
                put("5_27_10", 0.000);
                put("5_27_1", 0.004);
                put("5_26_9", 0.000);
                put("5_26_8", 0.000);
                put("5_26_7", 0.000);
                put("5_26_6", 0.000);
                put("5_26_5", 0.000);
                put("5_26_4", 0.000);
                put("5_26_3", 0.000);
                put("5_26_2", 0.000);
                put("5_26_10", 0.000);
                put("5_26_1", 0.002);
                put("5_25_9", 0.000);
                put("5_25_8", 0.000);
                put("5_25_7", 0.000);
                put("5_25_6", 0.000);
                put("5_25_5", 0.000);
                put("5_25_4", 0.000);
                put("5_25_3", 0.000);
                put("5_25_2", 0.001);
                put("5_25_10", 0.000);
                put("5_25_1", 0.005);
                put("5_24_9", 0.000);
                put("5_24_8", 0.000);
                put("5_24_7", 0.000);
                put("5_24_6", 0.000);
                put("5_24_5", 0.000);
                put("5_24_4", 0.000);
                put("5_24_3", 0.001);
                put("5_24_2", 0.002);
                put("5_24_10", 0.000);
                put("5_24_1", 0.028);
                put("5_23_9", 0.000);
                put("5_23_8", 0.000);
                put("5_23_7", 0.000);
                put("5_23_6", 0.000);
                put("5_23_5", 0.001);
                put("5_23_4", 0.001);
                put("5_23_3", 0.007);
                put("5_23_2", 0.007);
                put("5_23_10", 1.000);
                put("5_23_1", 0.105);
                put("5_22_9", 0.000);
                put("5_22_8", 0.000);
                put("5_22_7", 0.001);
                put("5_22_6", 0.002);
                put("5_22_5", 0.003);
                put("5_22_4", 0.054);
                put("5_22_3", 0.011);
                put("5_22_2", 0.144);
                put("5_22_10", 0.323);
                put("5_22_1", 0.224);
                put("5_21_9", 0.001);
                put("5_21_8", 0.001);
                put("5_21_7", 0.002);
                put("5_21_6", 0.001);
                put("5_21_5", 0.002);
                put("5_21_4", 0.003);
                put("5_21_3", 0.002);
                put("5_21_2", 0.002);
                put("5_21_10", 0.000);
                put("5_21_1", 0.003);
                put("4_49_9", 0.000);
                put("4_49_8", 0.000);
                put("4_49_7", 0.000);
                put("4_49_6", 0.000);
                put("4_49_5", 0.000);
                put("4_49_4", 0.000);
                put("4_49_3", 0.000);
                put("4_49_2", 0.000);
                put("4_49_10", 0.000);
                put("4_49_1", 0.000);
                put("4_48_9", 0.000);
                put("4_48_8", 0.000);
                put("4_48_7", 0.000);
                put("4_48_6", 0.000);
                put("4_48_5", 0.000);
                put("4_48_4", 0.000);
                put("4_48_3", 0.000);
                put("4_48_2", 0.000);
                put("4_48_10", 0.000);
                put("4_48_1", 0.000);
                put("4_47_9", 0.000);
                put("4_47_8", 0.000);
                put("4_47_7", 0.000);
                put("4_47_6", 0.000);
                put("4_47_5", 0.000);
                put("4_47_4", 0.000);
                put("4_47_3", 0.000);
                put("4_47_2", 0.000);
                put("4_47_10", 0.000);
                put("4_47_1", 0.000);
                put("4_46_9", 0.000);
                put("4_46_8", 0.000);
                put("4_46_7", 0.000);
                put("4_46_6", 0.000);
                put("4_46_5", 0.000);
                put("4_46_4", 0.000);
                put("4_46_3", 0.000);
                put("4_46_2", 0.000);
                put("4_46_10", 0.000);
                put("4_46_1", 0.000);
                put("4_45_9", 0.000);
                put("4_45_8", 0.000);
                put("4_45_7", 0.000);
                put("4_45_6", 0.000);
                put("4_45_5", 0.000);
                put("4_45_4", 0.000);
                put("4_45_3", 0.000);
                put("4_45_2", 0.000);
                put("4_45_10", 0.000);
                put("4_45_1", 0.000);
                put("4_44_9", 0.000);
                put("4_44_8", 0.000);
                put("4_44_7", 0.000);
                put("4_44_6", 0.000);
                put("4_44_5", 0.000);
                put("4_44_4", 0.000);
                put("4_44_3", 0.000);
                put("4_44_2", 0.000);
                put("4_44_10", 0.000);
                put("4_44_1", 0.000);
                put("4_43_9", 0.000);
                put("4_43_8", 0.000);
                put("4_43_7", 0.000);
                put("4_43_6", 0.000);
                put("4_43_5", 0.000);
                put("4_43_4", 0.000);
                put("4_43_3", 0.000);
                put("4_43_2", 0.000);
                put("4_43_10", 0.000);
                put("4_43_1", 0.000);
                put("4_42_9", 0.000);
                put("4_42_8", 0.000);
                put("4_42_7", 0.000);
                put("4_42_6", 0.000);
                put("4_42_5", 0.000);
                put("4_42_4", 0.000);
                put("4_42_3", 0.000);
                put("4_42_2", 0.000);
                put("4_42_10", 0.000);
                put("4_42_1", 0.000);
                put("4_41_9", 0.000);
                put("4_41_8", 0.000);
                put("4_41_7", 0.000);
                put("4_41_6", 0.000);
                put("4_41_5", 0.000);
                put("4_41_4", 0.000);
                put("4_41_3", 0.000);
                put("4_41_2", 0.000);
                put("4_41_10", 0.000);
                put("4_41_1", 0.000);
                put("4_40_9", 0.000);
                put("4_40_8", 0.000);
                put("4_40_7", 0.000);
                put("4_40_6", 0.000);
                put("4_40_5", 0.000);
                put("4_40_4", 0.000);
                put("4_40_3", 0.000);
                put("4_40_2", 0.000);
                put("4_40_10", 0.000);
                put("4_40_1", 0.000);
                put("4_39_9", 0.000);
                put("4_39_8", 0.000);
                put("4_39_7", 0.000);
                put("4_39_6", 0.000);
                put("4_39_5", 0.000);
                put("4_39_4", 0.000);
                put("4_39_3", 0.000);
                put("4_39_2", 0.000);
                put("4_39_10", 0.000);
                put("4_39_1", 0.000);
                put("4_38_9", 0.000);
                put("4_38_8", 0.000);
                put("4_38_7", 0.000);
                put("4_38_6", 0.000);
                put("4_38_5", 0.000);
                put("4_38_4", 0.000);
                put("4_38_3", 0.000);
                put("4_38_2", 0.000);
                put("4_38_10", 0.000);
                put("4_38_1", 0.000);
                put("4_37_9", 0.000);
                put("4_37_8", 0.000);
                put("4_37_7", 0.000);
                put("4_37_6", 0.000);
                put("4_37_5", 0.000);
                put("4_37_4", 0.000);
                put("4_37_3", 0.000);
                put("4_37_2", 0.000);
                put("4_37_10", 0.000);
                put("4_37_1", 0.000);
                put("4_36_9", 0.000);
                put("4_36_8", 0.000);
                put("4_36_7", 0.000);
                put("4_36_6", 0.000);
                put("4_36_5", 0.000);
                put("4_36_4", 0.000);
                put("4_36_3", 0.000);
                put("4_36_2", 0.000);
                put("4_36_10", 0.000);
                put("4_36_1", 0.000);
                put("4_35_9", 0.000);
                put("4_35_8", 0.000);
                put("4_35_7", 0.000);
                put("4_35_6", 0.000);
                put("4_35_5", 0.000);
                put("4_35_4", 0.000);
                put("4_35_3", 0.000);
                put("4_35_2", 0.000);
                put("4_35_10", 0.000);
                put("4_35_1", 0.000);
                put("4_34_9", 0.000);
                put("4_34_8", 0.000);
                put("4_34_7", 0.000);
                put("4_34_6", 0.000);
                put("4_34_5", 0.000);
                put("4_34_4", 0.000);
                put("4_34_3", 0.000);
                put("4_34_2", 0.000);
                put("4_34_10", 0.000);
                put("4_34_1", 0.000);
                put("4_33_9", 0.000);
                put("4_33_8", 0.000);
                put("4_33_7", 0.000);
                put("4_33_6", 0.000);
                put("4_33_5", 0.000);
                put("4_33_4", 0.000);
                put("4_33_3", 0.000);
                put("4_33_2", 0.000);
                put("4_33_10", 0.000);
                put("4_33_1", 0.000);
                put("4_32_9", 0.000);
                put("4_32_8", 0.000);
                put("4_32_7", 0.000);
                put("4_32_6", 0.000);
                put("4_32_5", 0.000);
                put("4_32_4", 0.000);
                put("4_32_3", 0.000);
                put("4_32_2", 0.000);
                put("4_32_10", 0.000);
                put("4_32_1", 0.000);
                put("4_31_9", 0.000);
                put("4_31_8", 0.000);
                put("4_31_7", 0.000);
                put("4_31_6", 0.000);
                put("4_31_5", 0.000);
                put("4_31_4", 0.000);
                put("4_31_3", 0.000);
                put("4_31_2", 0.000);
                put("4_31_10", 0.000);
                put("4_31_1", 0.000);
                put("4_30_9", 0.000);
                put("4_30_8", 0.000);
                put("4_30_7", 0.000);
                put("4_30_6", 0.000);
                put("4_30_5", 0.000);
                put("4_30_4", 0.000);
                put("4_30_3", 0.000);
                put("4_30_2", 0.000);
                put("4_30_10", 0.000);
                put("4_30_1", 0.000);
                put("4_29_9", 0.000);
                put("4_29_8", 0.000);
                put("4_29_7", 0.000);
                put("4_29_6", 0.000);
                put("4_29_5", 0.000);
                put("4_29_4", 0.000);
                put("4_29_3", 0.000);
                put("4_29_2", 0.000);
                put("4_29_10", 0.000);
                put("4_29_1", 0.000);
                put("4_28_9", 0.000);
                put("4_28_8", 0.000);
                put("4_28_7", 0.000);
                put("4_28_6", 0.000);
                put("4_28_5", 0.000);
                put("4_28_4", 0.000);
                put("4_28_3", 0.000);
                put("4_28_2", 0.000);
                put("4_28_10", 0.000);
                put("4_28_1", 0.001);
                put("4_27_9", 0.000);
                put("4_27_8", 0.000);
                put("4_27_7", 0.000);
                put("4_27_6", 0.000);
                put("4_27_5", 0.000);
                put("4_27_4", 0.000);
                put("4_27_3", 0.000);
                put("4_27_2", 0.000);
                put("4_27_10", 0.000);
                put("4_27_1", 0.001);
                put("4_26_9", 0.000);
                put("4_26_8", 0.000);
                put("4_26_7", 0.000);
                put("4_26_6", 0.000);
                put("4_26_5", 0.000);
                put("4_26_4", 0.000);
                put("4_26_3", 0.000);
                put("4_26_2", 0.000);
                put("4_26_10", 0.000);
                put("4_26_1", 0.004);
                put("4_25_9", 0.000);
                put("4_25_8", 0.000);
                put("4_25_7", 0.000);
                put("4_25_6", 0.000);
                put("4_25_5", 0.000);
                put("4_25_4", 0.000);
                put("4_25_3", 0.000);
                put("4_25_2", 0.001);
                put("4_25_10", 0.000);
                put("4_25_1", 0.003);
                put("4_24_9", 0.000);
                put("4_24_8", 0.000);
                put("4_24_7", 0.000);
                put("4_24_6", 0.000);
                put("4_24_5", 0.000);
                put("4_24_4", 0.000);
                put("4_24_3", 0.001);
                put("4_24_2", 0.002);
                put("4_24_10", 0.000);
                put("4_24_1", 0.005);
                put("4_23_9", 0.000);
                put("4_23_8", 0.000);
                put("4_23_7", 0.000);
                put("4_23_6", 0.000);
                put("4_23_5", 0.001);
                put("4_23_4", 0.002);
                put("4_23_3", 0.003);
                put("4_23_2", 0.010);
                put("4_23_10", 0.000);
                put("4_23_1", 0.110);
                put("4_22_9", 0.000);
                put("4_22_8", 0.000);
                put("4_22_7", 0.001);
                put("4_22_6", 0.001);
                put("4_22_5", 0.074);
                put("4_22_4", 0.007);
                put("4_22_3", 0.018);
                put("4_22_2", 0.029);
                put("4_22_10", 0.000);
                put("4_22_1", 0.188);
                put("4_21_9", 0.001);
                put("4_21_8", 0.001);
                put("4_21_7", 0.001);
                put("4_21_6", 0.002);
                put("4_21_5", 0.002);
                put("4_21_4", 0.341);
                put("4_21_3", 0.003);
                put("4_21_2", 0.004);
                put("4_21_10", 0.000);
                put("4_21_1", 0.054);
                put("3_49_9", 0.000);
                put("3_49_8", 0.000);
                put("3_49_7", 0.000);
                put("3_49_6", 0.000);
                put("3_49_5", 0.000);
                put("3_49_4", 0.000);
                put("3_49_3", 0.000);
                put("3_49_2", 0.000);
                put("3_49_10", 0.000);
                put("3_49_1", 0.001);
                put("3_48_9", 0.000);
                put("3_48_8", 0.000);
                put("3_48_7", 0.000);
                put("3_48_6", 0.000);
                put("3_48_5", 0.000);
                put("3_48_4", 0.001);
                put("3_48_3", 0.000);
                put("3_48_2", 0.000);
                put("3_48_10", 0.000);
                put("3_48_1", 0.000);
                put("3_47_9", 0.000);
                put("3_47_8", 0.000);
                put("3_47_7", 0.000);
                put("3_47_6", 0.000);
                put("3_47_5", 0.000);
                put("3_47_4", 0.000);
                put("3_47_3", 0.000);
                put("3_47_2", 0.000);
                put("3_47_10", 0.000);
                put("3_47_1", 0.000);
                put("3_46_9", 0.000);
                put("3_46_8", 0.000);
                put("3_46_7", 0.000);
                put("3_46_6", 0.000);
                put("3_46_5", 0.000);
                put("3_46_4", 0.000);
                put("3_46_3", 0.000);
                put("3_46_2", 0.000);
                put("3_46_10", 0.000);
                put("3_46_1", 0.000);
                put("3_45_9", 0.000);
                put("3_45_8", 0.000);
                put("3_45_7", 0.000);
                put("3_45_6", 0.000);
                put("3_45_5", 0.000);
                put("3_45_4", 0.000);
                put("3_45_3", 0.000);
                put("3_45_2", 0.000);
                put("3_45_10", 0.000);
                put("3_45_1", 0.000);
                put("3_44_9", 0.000);
                put("3_44_8", 0.000);
                put("3_44_7", 0.000);
                put("3_44_6", 0.000);
                put("3_44_5", 0.000);
                put("3_44_4", 0.000);
                put("3_44_3", 0.000);
                put("3_44_2", 0.000);
                put("3_44_10", 0.000);
                put("3_44_1", 0.000);
                put("3_43_9", 0.000);
                put("3_43_8", 0.000);
                put("3_43_7", 0.000);
                put("3_43_6", 0.000);
                put("3_43_5", 0.000);
                put("3_43_4", 0.000);
                put("3_43_3", 0.000);
                put("3_43_2", 0.000);
                put("3_43_10", 0.000);
                put("3_43_1", 0.000);
                put("3_42_9", 0.000);
                put("3_42_8", 0.000);
                put("3_42_7", 0.000);
                put("3_42_6", 0.000);
                put("3_42_5", 0.000);
                put("3_42_4", 0.000);
                put("3_42_3", 0.000);
                put("3_42_2", 0.000);
                put("3_42_10", 0.000);
                put("3_42_1", 0.000);
                put("3_41_9", 0.000);
                put("3_41_8", 0.000);
                put("3_41_7", 0.000);
                put("3_41_6", 0.000);
                put("3_41_5", 0.000);
                put("3_41_4", 0.000);
                put("3_41_3", 0.000);
                put("3_41_2", 0.000);
                put("3_41_10", 0.000);
                put("3_41_1", 0.000);
                put("3_40_9", 0.000);
                put("3_40_8", 0.000);
                put("3_40_7", 0.000);
                put("3_40_6", 0.000);
                put("3_40_5", 0.000);
                put("3_40_4", 0.000);
                put("3_40_3", 0.000);
                put("3_40_2", 0.000);
                put("3_40_10", 0.000);
                put("3_40_1", 0.000);
                put("3_39_9", 0.000);
                put("3_39_8", 0.000);
                put("3_39_7", 0.000);
                put("3_39_6", 0.000);
                put("3_39_5", 0.000);
                put("3_39_4", 0.000);
                put("3_39_3", 0.000);
                put("3_39_2", 0.000);
                put("3_39_10", 0.000);
                put("3_39_1", 0.000);
                put("3_38_9", 0.000);
                put("3_38_8", 0.000);
                put("3_38_7", 0.000);
                put("3_38_6", 0.000);
                put("3_38_5", 0.000);
                put("3_38_4", 0.000);
                put("3_38_3", 0.000);
                put("3_38_2", 0.000);
                put("3_38_10", 0.000);
                put("3_38_1", 0.000);
                put("3_37_9", 0.000);
                put("3_37_8", 0.000);
                put("3_37_7", 0.000);
                put("3_37_6", 0.000);
                put("3_37_5", 0.000);
                put("3_37_4", 0.000);
                put("3_37_3", 0.000);
                put("3_37_2", 0.000);
                put("3_37_10", 0.000);
                put("3_37_1", 0.000);
                put("3_36_9", 0.000);
                put("3_36_8", 0.000);
                put("3_36_7", 0.000);
                put("3_36_6", 0.000);
                put("3_36_5", 0.000);
                put("3_36_4", 0.000);
                put("3_36_3", 0.000);
                put("3_36_2", 0.000);
                put("3_36_10", 0.000);
                put("3_36_1", 0.000);
                put("3_35_9", 0.000);
                put("3_35_8", 0.000);
                put("3_35_7", 0.000);
                put("3_35_6", 0.000);
                put("3_35_5", 0.000);
                put("3_35_4", 0.000);
                put("3_35_3", 0.000);
                put("3_35_2", 0.000);
                put("3_35_10", 0.000);
                put("3_35_1", 0.000);
                put("3_34_9", 0.000);
                put("3_34_8", 0.000);
                put("3_34_7", 0.000);
                put("3_34_6", 0.000);
                put("3_34_5", 0.000);
                put("3_34_4", 0.000);
                put("3_34_3", 0.000);
                put("3_34_2", 0.000);
                put("3_34_10", 0.000);
                put("3_34_1", 0.000);
                put("3_33_9", 0.000);
                put("3_33_8", 0.000);
                put("3_33_7", 0.000);
                put("3_33_6", 0.000);
                put("3_33_5", 0.000);
                put("3_33_4", 0.000);
                put("3_33_3", 0.000);
                put("3_33_2", 0.000);
                put("3_33_10", 0.000);
                put("3_33_1", 0.000);
                put("3_32_9", 0.000);
                put("3_32_8", 0.000);
                put("3_32_7", 0.000);
                put("3_32_6", 0.000);
                put("3_32_5", 0.000);
                put("3_32_4", 0.000);
                put("3_32_3", 0.000);
                put("3_32_2", 0.000);
                put("3_32_10", 0.000);
                put("3_32_1", 0.000);
                put("3_31_9", 0.000);
                put("3_31_8", 0.000);
                put("3_31_7", 0.000);
                put("3_31_6", 0.000);
                put("3_31_5", 0.000);
                put("3_31_4", 0.000);
                put("3_31_3", 0.000);
                put("3_31_2", 0.000);
                put("3_31_10", 0.000);
                put("3_31_1", 0.000);
                put("3_30_9", 0.000);
                put("3_30_8", 0.000);
                put("3_30_7", 0.000);
                put("3_30_6", 0.000);
                put("3_30_5", 0.000);
                put("3_30_4", 0.000);
                put("3_30_3", 0.000);
                put("3_30_2", 0.000);
                put("3_30_10", 0.000);
                put("3_30_1", 0.000);
                put("3_29_9", 0.000);
                put("3_29_8", 0.000);
                put("3_29_7", 0.000);
                put("3_29_6", 0.000);
                put("3_29_5", 0.000);
                put("3_29_4", 0.000);
                put("3_29_3", 0.000);
                put("3_29_2", 0.000);
                put("3_29_10", 0.000);
                put("3_29_1", 0.000);
                put("3_28_9", 0.000);
                put("3_28_8", 0.000);
                put("3_28_7", 0.000);
                put("3_28_6", 0.000);
                put("3_28_5", 0.000);
                put("3_28_4", 0.000);
                put("3_28_3", 0.000);
                put("3_28_2", 0.000);
                put("3_28_10", 0.000);
                put("3_28_1", 0.001);
                put("3_27_9", 0.000);
                put("3_27_8", 0.000);
                put("3_27_7", 0.000);
                put("3_27_6", 0.000);
                put("3_27_5", 0.000);
                put("3_27_4", 0.000);
                put("3_27_3", 0.000);
                put("3_27_2", 0.000);
                put("3_27_10", 0.000);
                put("3_27_1", 0.001);
                put("3_26_9", 0.000);
                put("3_26_8", 0.000);
                put("3_26_7", 0.000);
                put("3_26_6", 0.000);
                put("3_26_5", 0.000);
                put("3_26_4", 0.000);
                put("3_26_3", 0.000);
                put("3_26_2", 0.000);
                put("3_26_10", 0.000);
                put("3_26_1", 0.001);
                put("3_25_9", 0.000);
                put("3_25_8", 0.000);
                put("3_25_7", 0.000);
                put("3_25_6", 0.000);
                put("3_25_5", 0.000);
                put("3_25_4", 0.000);
                put("3_25_3", 0.000);
                put("3_25_2", 0.001);
                put("3_25_10", 0.000);
                put("3_25_1", 0.004);
                put("3_24_9", 0.000);
                put("3_24_8", 0.000);
                put("3_24_7", 0.000);
                put("3_24_6", 0.000);
                put("3_24_5", 0.000);
                put("3_24_4", 0.000);
                put("3_24_3", 0.001);
                put("3_24_2", 0.002);
                put("3_24_10", 0.000);
                put("3_24_1", 0.018);
                put("3_23_9", 0.000);
                put("3_23_8", 0.000);
                put("3_23_7", 0.000);
                put("3_23_6", 0.000);
                put("3_23_5", 0.001);
                put("3_23_4", 0.002);
                put("3_23_3", 0.003);
                put("3_23_2", 0.008);
                put("3_23_10", 0.000);
                put("3_23_1", 0.027);
                put("3_22_9", 0.000);
                put("3_22_8", 0.001);
                put("3_22_7", 0.001);
                put("3_22_6", 0.001);
                put("3_22_5", 0.002);
                put("3_22_4", 0.009);
                put("3_22_3", 0.020);
                put("3_22_2", 0.012);
                put("3_22_10", 0.000);
                put("3_22_1", 0.651);
                put("3_21_9", 0.001);
                put("3_21_8", 0.001);
                put("3_21_7", 0.002);
                put("3_21_6", 0.002);
                put("3_21_5", 0.002);
                put("3_21_4", 0.667);
                put("3_21_3", 0.003);
                put("3_21_2", 0.004);
                put("3_21_10", 0.000);
                put("3_21_1", 0.004);
                put("2_49_9", 0.000);
                put("2_49_8", 0.000);
                put("2_49_7", 0.000);
                put("2_49_6", 0.000);
                put("2_49_5", 0.000);
                put("2_49_4", 0.000);
                put("2_49_3", 0.000);
                put("2_49_2", 0.000);
                put("2_49_10", 0.000);
                put("2_49_1", 0.000);
                put("2_48_9", 0.000);
                put("2_48_8", 0.000);
                put("2_48_7", 0.000);
                put("2_48_6", 0.000);
                put("2_48_5", 0.000);
                put("2_48_4", 0.000);
                put("2_48_3", 0.000);
                put("2_48_2", 0.000);
                put("2_48_10", 0.000);
                put("2_48_1", 0.000);
                put("2_47_9", 0.000);
                put("2_47_8", 0.000);
                put("2_47_7", 0.000);
                put("2_47_6", 0.000);
                put("2_47_5", 0.000);
                put("2_47_4", 0.000);
                put("2_47_3", 0.000);
                put("2_47_2", 0.000);
                put("2_47_10", 0.000);
                put("2_47_1", 0.000);
                put("2_46_9", 0.000);
                put("2_46_8", 0.000);
                put("2_46_7", 0.000);
                put("2_46_6", 0.000);
                put("2_46_5", 0.000);
                put("2_46_4", 0.000);
                put("2_46_3", 0.000);
                put("2_46_2", 0.000);
                put("2_46_10", 0.000);
                put("2_46_1", 0.000);
                put("2_45_9", 0.000);
                put("2_45_8", 0.000);
                put("2_45_7", 0.000);
                put("2_45_6", 0.000);
                put("2_45_5", 0.000);
                put("2_45_4", 0.000);
                put("2_45_3", 0.000);
                put("2_45_2", 0.000);
                put("2_45_10", 0.000);
                put("2_45_1", 0.000);
                put("2_44_9", 0.000);
                put("2_44_8", 0.000);
                put("2_44_7", 0.000);
                put("2_44_6", 0.000);
                put("2_44_5", 0.000);
                put("2_44_4", 0.000);
                put("2_44_3", 0.000);
                put("2_44_2", 0.000);
                put("2_44_10", 0.000);
                put("2_44_1", 0.000);
                put("2_43_9", 0.000);
                put("2_43_8", 0.000);
                put("2_43_7", 0.000);
                put("2_43_6", 0.000);
                put("2_43_5", 0.000);
                put("2_43_4", 0.000);
                put("2_43_3", 0.000);
                put("2_43_2", 0.000);
                put("2_43_10", 0.000);
                put("2_43_1", 0.000);
                put("2_42_9", 0.000);
                put("2_42_8", 0.000);
                put("2_42_7", 0.000);
                put("2_42_6", 0.000);
                put("2_42_5", 0.000);
                put("2_42_4", 0.000);
                put("2_42_3", 0.000);
                put("2_42_2", 0.000);
                put("2_42_10", 0.000);
                put("2_42_1", 0.000);
                put("2_41_9", 0.000);
                put("2_41_8", 0.000);
                put("2_41_7", 0.000);
                put("2_41_6", 0.000);
                put("2_41_5", 0.000);
                put("2_41_4", 0.000);
                put("2_41_3", 0.000);
                put("2_41_2", 0.000);
                put("2_41_10", 0.000);
                put("2_41_1", 0.000);
                put("2_40_9", 0.000);
                put("2_40_8", 0.000);
                put("2_40_7", 0.000);
                put("2_40_6", 0.000);
                put("2_40_5", 0.000);
                put("2_40_4", 0.000);
                put("2_40_3", 0.000);
                put("2_40_2", 0.000);
                put("2_40_10", 0.000);
                put("2_40_1", 0.000);
                put("2_39_9", 0.000);
                put("2_39_8", 0.000);
                put("2_39_7", 0.000);
                put("2_39_6", 0.000);
                put("2_39_5", 0.000);
                put("2_39_4", 0.000);
                put("2_39_3", 0.000);
                put("2_39_2", 0.000);
                put("2_39_10", 0.000);
                put("2_39_1", 0.000);
                put("2_38_9", 0.000);
                put("2_38_8", 0.000);
                put("2_38_7", 0.000);
                put("2_38_6", 0.000);
                put("2_38_5", 0.000);
                put("2_38_4", 0.000);
                put("2_38_3", 0.000);
                put("2_38_2", 0.000);
                put("2_38_10", 0.000);
                put("2_38_1", 0.000);
                put("2_37_9", 0.000);
                put("2_37_8", 0.000);
                put("2_37_7", 0.000);
                put("2_37_6", 0.000);
                put("2_37_5", 0.000);
                put("2_37_4", 0.000);
                put("2_37_3", 0.000);
                put("2_37_2", 0.000);
                put("2_37_10", 0.000);
                put("2_37_1", 0.000);
                put("2_36_9", 0.000);
                put("2_36_8", 0.000);
                put("2_36_7", 0.000);
                put("2_36_6", 0.000);
                put("2_36_5", 0.000);
                put("2_36_4", 0.000);
                put("2_36_3", 0.000);
                put("2_36_2", 0.000);
                put("2_36_10", 0.000);
                put("2_36_1", 0.000);
                put("2_35_9", 0.000);
                put("2_35_8", 0.000);
                put("2_35_7", 0.000);
                put("2_35_6", 0.000);
                put("2_35_5", 0.000);
                put("2_35_4", 0.000);
                put("2_35_3", 0.000);
                put("2_35_2", 0.000);
                put("2_35_10", 0.000);
                put("2_35_1", 0.000);
                put("2_34_9", 0.000);
                put("2_34_8", 0.000);
                put("2_34_7", 0.000);
                put("2_34_6", 0.000);
                put("2_34_5", 0.000);
                put("2_34_4", 0.000);
                put("2_34_3", 0.000);
                put("2_34_2", 0.000);
                put("2_34_10", 0.000);
                put("2_34_1", 0.000);
                put("2_33_9", 0.000);
                put("2_33_8", 0.000);
                put("2_33_7", 0.000);
                put("2_33_6", 0.000);
                put("2_33_5", 0.000);
                put("2_33_4", 0.000);
                put("2_33_3", 0.000);
                put("2_33_2", 0.000);
                put("2_33_10", 0.000);
                put("2_33_1", 0.000);
                put("2_32_9", 0.000);
                put("2_32_8", 0.000);
                put("2_32_7", 0.000);
                put("2_32_6", 0.000);
                put("2_32_5", 0.000);
                put("2_32_4", 0.000);
                put("2_32_3", 0.000);
                put("2_32_2", 0.000);
                put("2_32_10", 0.000);
                put("2_32_1", 0.000);
                put("2_31_9", 0.000);
                put("2_31_8", 0.000);
                put("2_31_7", 0.000);
                put("2_31_6", 0.000);
                put("2_31_5", 0.000);
                put("2_31_4", 0.000);
                put("2_31_3", 0.000);
                put("2_31_2", 0.000);
                put("2_31_10", 0.000);
                put("2_31_1", 0.000);
                put("2_30_9", 0.000);
                put("2_30_8", 0.000);
                put("2_30_7", 0.000);
                put("2_30_6", 0.000);
                put("2_30_5", 0.000);
                put("2_30_4", 0.000);
                put("2_30_3", 0.000);
                put("2_30_2", 0.000);
                put("2_30_10", 0.000);
                put("2_30_1", 0.000);
                put("2_29_9", 0.000);
                put("2_29_8", 0.000);
                put("2_29_7", 0.000);
                put("2_29_6", 0.000);
                put("2_29_5", 0.000);
                put("2_29_4", 0.000);
                put("2_29_3", 0.000);
                put("2_29_2", 0.000);
                put("2_29_10", 0.000);
                put("2_29_1", 0.000);
                put("2_28_9", 0.000);
                put("2_28_8", 0.000);
                put("2_28_7", 0.000);
                put("2_28_6", 0.000);
                put("2_28_5", 0.000);
                put("2_28_4", 0.000);
                put("2_28_3", 0.000);
                put("2_28_2", 0.000);
                put("2_28_10", 0.000);
                put("2_28_1", 0.000);
                put("2_27_9", 0.000);
                put("2_27_8", 0.000);
                put("2_27_7", 0.000);
                put("2_27_6", 0.000);
                put("2_27_5", 0.000);
                put("2_27_4", 0.000);
                put("2_27_3", 0.000);
                put("2_27_2", 0.000);
                put("2_27_10", 0.000);
                put("2_27_1", 0.000);
                put("2_26_9", 0.000);
                put("2_26_8", 0.000);
                put("2_26_7", 0.000);
                put("2_26_6", 0.000);
                put("2_26_5", 0.000);
                put("2_26_4", 0.000);
                put("2_26_3", 0.000);
                put("2_26_2", 0.000);
                put("2_26_10", 0.000);
                put("2_26_1", 0.001);
                put("2_25_9", 0.000);
                put("2_25_8", 0.000);
                put("2_25_7", 0.000);
                put("2_25_6", 0.000);
                put("2_25_5", 0.000);
                put("2_25_4", 0.000);
                put("2_25_3", 0.000);
                put("2_25_2", 0.001);
                put("2_25_10", 0.000);
                put("2_25_1", 0.002);
                put("2_24_9", 0.000);
                put("2_24_8", 0.000);
                put("2_24_7", 0.000);
                put("2_24_6", 0.000);
                put("2_24_5", 0.000);
                put("2_24_4", 0.000);
                put("2_24_3", 0.001);
                put("2_24_2", 0.002);
                put("2_24_10", 0.000);
                put("2_24_1", 0.010);
                put("2_23_9", 0.000);
                put("2_23_8", 0.000);
                put("2_23_7", 0.000);
                put("2_23_6", 0.000);
                put("2_23_5", 0.000);
                put("2_23_4", 0.001);
                put("2_23_3", 0.002);
                put("2_23_2", 0.005);
                put("2_23_10", 0.000);
                put("2_23_1", 0.048);
                put("2_22_9", 0.000);
                put("2_22_8", 0.001);
                put("2_22_7", 0.001);
                put("2_22_6", 0.001);
                put("2_22_5", 0.001);
                put("2_22_4", 0.004);
                put("2_22_3", 0.008);
                put("2_22_2", 0.024);
                put("2_22_10", 0.000);
                put("2_22_1", 0.269);
                put("2_21_9", 0.001);
                put("2_21_8", 0.001);
                put("2_21_7", 0.001);
                put("2_21_6", 0.002);
                put("2_21_5", 0.002);
                put("2_21_4", 0.002);
                put("2_21_3", 0.003);
                put("2_21_2", 0.422);
                put("2_21_10", 1.000);
                put("2_21_1", 0.004);
                put("1_49_9", 0.000);
                put("1_49_8", 0.000);
                put("1_49_7", 0.000);
                put("1_49_6", 0.000);
                put("1_49_5", 0.000);
                put("1_49_4", 0.000);
                put("1_49_3", 0.000);
                put("1_49_2", 0.000);
                put("1_49_10", 0.000);
                put("1_49_1", 0.000);
                put("1_48_9", 0.000);
                put("1_48_8", 0.000);
                put("1_48_7", 0.000);
                put("1_48_6", 0.000);
                put("1_48_5", 0.000);
                put("1_48_4", 0.000);
                put("1_48_3", 0.000);
                put("1_48_2", 0.000);
                put("1_48_10", 0.000);
                put("1_48_1", 0.000);
                put("1_47_9", 0.000);
                put("1_47_8", 0.000);
                put("1_47_7", 0.000);
                put("1_47_6", 0.000);
                put("1_47_5", 0.000);
                put("1_47_4", 0.000);
                put("1_47_3", 0.000);
                put("1_47_2", 0.000);
                put("1_47_10", 0.000);
                put("1_47_1", 0.000);
                put("1_46_9", 0.000);
                put("1_46_8", 0.000);
                put("1_46_7", 0.000);
                put("1_46_6", 0.000);
                put("1_46_5", 0.000);
                put("1_46_4", 0.000);
                put("1_46_3", 0.000);
                put("1_46_2", 0.000);
                put("1_46_10", 0.000);
                put("1_46_1", 0.000);
                put("1_45_9", 0.000);
                put("1_45_8", 0.000);
                put("1_45_7", 0.000);
                put("1_45_6", 0.000);
                put("1_45_5", 0.000);
                put("1_45_4", 0.000);
                put("1_45_3", 0.000);
                put("1_45_2", 0.000);
                put("1_45_10", 0.000);
                put("1_45_1", 0.000);
                put("1_44_9", 0.000);
                put("1_44_8", 0.000);
                put("1_44_7", 0.000);
                put("1_44_6", 0.000);
                put("1_44_5", 0.000);
                put("1_44_4", 0.000);
                put("1_44_3", 0.000);
                put("1_44_2", 0.000);
                put("1_44_10", 0.000);
                put("1_44_1", 0.000);
                put("1_43_9", 0.000);
                put("1_43_8", 0.000);
                put("1_43_7", 0.000);
                put("1_43_6", 0.000);
                put("1_43_5", 0.000);
                put("1_43_4", 0.000);
                put("1_43_3", 0.000);
                put("1_43_2", 0.000);
                put("1_43_10", 0.000);
                put("1_43_1", 0.000);
                put("1_42_9", 0.000);
                put("1_42_8", 0.000);
                put("1_42_7", 0.000);
                put("1_42_6", 0.000);
                put("1_42_5", 0.000);
                put("1_42_4", 0.000);
                put("1_42_3", 0.000);
                put("1_42_2", 0.000);
                put("1_42_10", 0.000);
                put("1_42_1", 0.000);
                put("1_41_9", 0.000);
                put("1_41_8", 0.000);
                put("1_41_7", 0.000);
                put("1_41_6", 0.000);
                put("1_41_5", 0.000);
                put("1_41_4", 0.000);
                put("1_41_3", 0.000);
                put("1_41_2", 0.000);
                put("1_41_10", 0.000);
                put("1_41_1", 0.000);
                put("1_40_9", 0.000);
                put("1_40_8", 0.000);
                put("1_40_7", 0.000);
                put("1_40_6", 0.000);
                put("1_40_5", 0.000);
                put("1_40_4", 0.000);
                put("1_40_3", 0.000);
                put("1_40_2", 0.000);
                put("1_40_10", 0.000);
                put("1_40_1", 0.000);
                put("1_39_9", 0.000);
                put("1_39_8", 0.000);
                put("1_39_7", 0.000);
                put("1_39_6", 0.000);
                put("1_39_5", 0.000);
                put("1_39_4", 0.000);
                put("1_39_3", 0.000);
                put("1_39_2", 0.000);
                put("1_39_10", 0.000);
                put("1_39_1", 0.000);
                put("1_38_9", 0.000);
                put("1_38_8", 0.000);
                put("1_38_7", 0.000);
                put("1_38_6", 0.000);
                put("1_38_5", 0.000);
                put("1_38_4", 0.000);
                put("1_38_3", 0.000);
                put("1_38_2", 0.000);
                put("1_38_10", 0.000);
                put("1_38_1", 0.000);
                put("1_37_9", 0.000);
                put("1_37_8", 0.000);
                put("1_37_7", 0.000);
                put("1_37_6", 0.000);
                put("1_37_5", 0.000);
                put("1_37_4", 0.000);
                put("1_37_3", 0.000);
                put("1_37_2", 0.000);
                put("1_37_10", 0.000);
                put("1_37_1", 0.000);
                put("1_36_9", 0.000);
                put("1_36_8", 0.000);
                put("1_36_7", 0.000);
                put("1_36_6", 0.000);
                put("1_36_5", 0.000);
                put("1_36_4", 0.000);
                put("1_36_3", 0.000);
                put("1_36_2", 0.000);
                put("1_36_10", 0.000);
                put("1_36_1", 0.000);
                put("1_35_9", 0.000);
                put("1_35_8", 0.000);
                put("1_35_7", 0.000);
                put("1_35_6", 0.000);
                put("1_35_5", 0.000);
                put("1_35_4", 0.000);
                put("1_35_3", 0.000);
                put("1_35_2", 0.000);
                put("1_35_10", 0.000);
                put("1_35_1", 0.000);
                put("1_34_9", 0.000);
                put("1_34_8", 0.000);
                put("1_34_7", 0.000);
                put("1_34_6", 0.000);
                put("1_34_5", 0.000);
                put("1_34_4", 0.000);
                put("1_34_3", 0.000);
                put("1_34_2", 0.000);
                put("1_34_10", 0.000);
                put("1_34_1", 0.000);
                put("1_33_9", 0.000);
                put("1_33_8", 0.000);
                put("1_33_7", 0.000);
                put("1_33_6", 0.000);
                put("1_33_5", 0.000);
                put("1_33_4", 0.000);
                put("1_33_3", 0.000);
                put("1_33_2", 0.000);
                put("1_33_10", 0.000);
                put("1_33_1", 0.000);
                put("1_32_9", 0.000);
                put("1_32_8", 0.000);
                put("1_32_7", 0.000);
                put("1_32_6", 0.000);
                put("1_32_5", 0.000);
                put("1_32_4", 0.000);
                put("1_32_3", 0.000);
                put("1_32_2", 0.000);
                put("1_32_10", 0.000);
                put("1_32_1", 0.000);
                put("1_31_9", 0.000);
                put("1_31_8", 0.000);
                put("1_31_7", 0.000);
                put("1_31_6", 0.000);
                put("1_31_5", 0.000);
                put("1_31_4", 0.000);
                put("1_31_3", 0.000);
                put("1_31_2", 0.000);
                put("1_31_10", 0.000);
                put("1_31_1", 0.000);
                put("1_30_9", 0.000);
                put("1_30_8", 0.000);
                put("1_30_7", 0.000);
                put("1_30_6", 0.000);
                put("1_30_5", 0.000);
                put("1_30_4", 0.000);
                put("1_30_3", 0.000);
                put("1_30_2", 0.000);
                put("1_30_10", 0.000);
                put("1_30_1", 0.000);
                put("1_29_9", 0.000);
                put("1_29_8", 0.000);
                put("1_29_7", 0.000);
                put("1_29_6", 0.000);
                put("1_29_5", 0.000);
                put("1_29_4", 0.000);
                put("1_29_3", 0.000);
                put("1_29_2", 0.000);
                put("1_29_10", 0.000);
                put("1_29_1", 0.000);
                put("1_28_9", 0.000);
                put("1_28_8", 0.000);
                put("1_28_7", 0.000);
                put("1_28_6", 0.000);
                put("1_28_5", 0.000);
                put("1_28_4", 0.000);
                put("1_28_3", 0.000);
                put("1_28_2", 0.000);
                put("1_28_10", 0.000);
                put("1_28_1", 0.000);
                put("1_27_9", 0.000);
                put("1_27_8", 0.000);
                put("1_27_7", 0.000);
                put("1_27_6", 0.000);
                put("1_27_5", 0.000);
                put("1_27_4", 0.000);
                put("1_27_3", 0.000);
                put("1_27_2", 0.000);
                put("1_27_10", 0.000);
                put("1_27_1", 0.000);
                put("1_26_9", 0.000);
                put("1_26_8", 0.000);
                put("1_26_7", 0.000);
                put("1_26_6", 0.000);
                put("1_26_5", 0.000);
                put("1_26_4", 0.000);
                put("1_26_3", 0.000);
                put("1_26_2", 0.000);
                put("1_26_10", 0.000);
                put("1_26_1", 0.001);
                put("1_25_9", 0.000);
                put("1_25_8", 0.000);
                put("1_25_7", 0.000);
                put("1_25_6", 0.000);
                put("1_25_5", 0.000);
                put("1_25_4", 0.000);
                put("1_25_3", 0.000);
                put("1_25_2", 0.000);
                put("1_25_10", 0.000);
                put("1_25_1", 0.002);
                put("1_24_9", 0.000);
                put("1_24_8", 0.000);
                put("1_24_7", 0.000);
                put("1_24_6", 0.000);
                put("1_24_5", 0.000);
                put("1_24_4", 0.000);
                put("1_24_3", 0.000);
                put("1_24_2", 0.001);
                put("1_24_10", 0.000);
                put("1_24_1", 0.009);
                put("1_23_9", 0.000);
                put("1_23_8", 0.000);
                put("1_23_7", 0.000);
                put("1_23_6", 0.000);
                put("1_23_5", 0.000);
                put("1_23_4", 0.001);
                put("1_23_3", 0.001);
                put("1_23_2", 0.005);
                put("1_23_10", 0.000);
                put("1_23_1", 0.035);
                put("1_22_9", 0.000);
                put("1_22_8", 0.000);
                put("1_22_7", 0.001);
                put("1_22_6", 0.001);
                put("1_22_5", 0.001);
                put("1_22_4", 0.003);
                put("1_22_3", 0.006);
                put("1_22_2", 0.016);
                put("1_22_10", 0.000);
                put("1_22_1", 0.082);
                put("1_21_9", 0.001);
                put("1_21_8", 0.001);
                put("1_21_7", 0.001);
                put("1_21_6", 0.002);
                put("1_21_5", 0.002);
                put("1_21_4", 0.051);
                put("1_21_3", 0.002);
                put("1_21_2", 0.003);
                put("1_21_10", 0.000);
                put("1_21_1", 0.004);
                put("10_49_9", 0.000);
                put("10_49_8", 0.000);
                put("10_49_7", 0.000);
                put("10_49_6", 0.000);
                put("10_49_5", 0.000);
                put("10_49_4", 0.000);
                put("10_49_3", 0.001);
                put("10_49_2", 0.007);
                put("10_49_10", 0.000);
                put("10_49_1", 0.014);
                put("10_48_9", 0.000);
                put("10_48_8", 0.000);
                put("10_48_7", 0.000);
                put("10_48_6", 0.000);
                put("10_48_5", 0.000);
                put("10_48_4", 0.000);
                put("10_48_3", 0.002);
                put("10_48_2", 0.004);
                put("10_48_10", 0.000);
                put("10_48_1", 0.038);
                put("10_47_9", 0.000);
                put("10_47_8", 0.000);
                put("10_47_7", 0.000);
                put("10_47_6", 0.000);
                put("10_47_5", 0.000);
                put("10_47_4", 0.000);
                put("10_47_3", 0.002);
                put("10_47_2", 0.001);
                put("10_47_10", 0.000);
                put("10_47_1", 0.009);
                put("10_46_9", 0.000);
                put("10_46_8", 0.000);
                put("10_46_7", 0.000);
                put("10_46_6", 0.000);
                put("10_46_5", 0.000);
                put("10_46_4", 0.000);
                put("10_46_3", 0.000);
                put("10_46_2", 0.002);
                put("10_46_10", 0.000);
                put("10_46_1", 0.004);
                put("10_45_9", 0.000);
                put("10_45_8", 0.000);
                put("10_45_7", 0.000);
                put("10_45_6", 0.000);
                put("10_45_5", 0.000);
                put("10_45_4", 0.000);
                put("10_45_3", 0.000);
                put("10_45_2", 0.001);
                put("10_45_10", 0.000);
                put("10_45_1", 0.006);
                put("10_44_9", 0.000);
                put("10_44_8", 0.000);
                put("10_44_7", 0.000);
                put("10_44_6", 0.000);
                put("10_44_5", 0.000);
                put("10_44_4", 0.000);
                put("10_44_3", 0.000);
                put("10_44_2", 0.000);
                put("10_44_10", 0.000);
                put("10_44_1", 0.001);
                put("10_43_9", 0.000);
                put("10_43_8", 0.000);
                put("10_43_7", 0.000);
                put("10_43_6", 0.000);
                put("10_43_5", 0.000);
                put("10_43_4", 0.000);
                put("10_43_3", 0.000);
                put("10_43_2", 0.000);
                put("10_43_10", 0.000);
                put("10_43_1", 0.001);
                put("10_42_9", 0.000);
                put("10_42_8", 0.000);
                put("10_42_7", 0.000);
                put("10_42_6", 0.000);
                put("10_42_5", 0.000);
                put("10_42_4", 0.000);
                put("10_42_3", 0.000);
                put("10_42_2", 0.000);
                put("10_42_10", 0.000);
                put("10_42_1", 0.001);
                put("10_41_9", 0.000);
                put("10_41_8", 0.000);
                put("10_41_7", 0.000);
                put("10_41_6", 0.000);
                put("10_41_5", 0.000);
                put("10_41_4", 0.000);
                put("10_41_3", 0.000);
                put("10_41_2", 0.000);
                put("10_41_10", 0.000);
                put("10_41_1", 0.001);
                put("10_40_9", 0.000);
                put("10_40_8", 0.000);
                put("10_40_7", 0.000);
                put("10_40_6", 0.000);
                put("10_40_5", 0.000);
                put("10_40_4", 0.000);
                put("10_40_3", 0.000);
                put("10_40_2", 0.000);
                put("10_40_10", 0.000);
                put("10_40_1", 0.001);
                put("10_39_9", 0.000);
                put("10_39_8", 0.000);
                put("10_39_7", 0.000);
                put("10_39_6", 0.000);
                put("10_39_5", 0.000);
                put("10_39_4", 0.000);
                put("10_39_3", 0.000);
                put("10_39_2", 0.000);
                put("10_39_10", 0.000);
                put("10_39_1", 0.000);
                put("10_38_9", 0.000);
                put("10_38_8", 0.000);
                put("10_38_7", 0.000);
                put("10_38_6", 0.000);
                put("10_38_5", 0.000);
                put("10_38_4", 0.000);
                put("10_38_3", 0.000);
                put("10_38_2", 0.000);
                put("10_38_10", 0.000);
                put("10_38_1", 0.000);
                put("10_37_9", 0.000);
                put("10_37_8", 0.000);
                put("10_37_7", 0.000);
                put("10_37_6", 0.000);
                put("10_37_5", 0.000);
                put("10_37_4", 0.000);
                put("10_37_3", 0.000);
                put("10_37_2", 0.000);
                put("10_37_10", 0.000);
                put("10_37_1", 0.000);
                put("10_36_9", 0.000);
                put("10_36_8", 0.000);
                put("10_36_7", 0.000);
                put("10_36_6", 0.000);
                put("10_36_5", 0.000);
                put("10_36_4", 0.000);
                put("10_36_3", 0.000);
                put("10_36_2", 0.000);
                put("10_36_10", 0.000);
                put("10_36_1", 0.000);
                put("10_35_9", 0.000);
                put("10_35_8", 0.000);
                put("10_35_7", 0.000);
                put("10_35_6", 0.000);
                put("10_35_5", 0.000);
                put("10_35_4", 0.000);
                put("10_35_3", 0.000);
                put("10_35_2", 0.000);
                put("10_35_10", 0.000);
                put("10_35_1", 0.000);
                put("10_34_9", 0.000);
                put("10_34_8", 0.000);
                put("10_34_7", 0.000);
                put("10_34_6", 0.000);
                put("10_34_5", 0.000);
                put("10_34_4", 0.000);
                put("10_34_3", 0.000);
                put("10_34_2", 0.000);
                put("10_34_10", 0.000);
                put("10_34_1", 0.000);
                put("10_33_9", 0.000);
                put("10_33_8", 0.000);
                put("10_33_7", 0.000);
                put("10_33_6", 0.000);
                put("10_33_5", 0.000);
                put("10_33_4", 0.000);
                put("10_33_3", 0.000);
                put("10_33_2", 0.000);
                put("10_33_10", 0.000);
                put("10_33_1", 0.000);
                put("10_32_9", 0.000);
                put("10_32_8", 0.000);
                put("10_32_7", 0.000);
                put("10_32_6", 0.000);
                put("10_32_5", 0.000);
                put("10_32_4", 0.000);
                put("10_32_3", 0.000);
                put("10_32_2", 0.000);
                put("10_32_10", 0.000);
                put("10_32_1", 0.000);
                put("10_31_9", 0.277);
                put("10_31_8", 0.000);
                put("10_31_7", 0.000);
                put("10_31_6", 0.000);
                put("10_31_5", 0.000);
                put("10_31_4", 0.000);
                put("10_31_3", 0.000);
                put("10_31_2", 0.000);
                put("10_31_10", 0.000);
                put("10_31_1", 0.000);
                put("10_30_9", 0.154);
                put("10_30_8", 0.001);
                put("10_30_7", 0.000);
                put("10_30_6", 0.000);
                put("10_30_5", 0.000);
                put("10_30_4", 0.000);
                put("10_30_3", 0.000);
                put("10_30_2", 0.000);
                put("10_30_10", 0.000);
                put("10_30_1", 0.000);
                put("10_29_9", 0.022);
                put("10_29_8", 0.000);
                put("10_29_7", 0.000);
                put("10_29_6", 0.000);
                put("10_29_5", 0.000);
                put("10_29_4", 0.000);
                put("10_29_3", 0.000);
                put("10_29_2", 0.000);
                put("10_29_10", 0.001);
                put("10_29_1", 0.001);
                put("10_28_9", 0.007);
                put("10_28_8", 0.000);
                put("10_28_7", 0.000);
                put("10_28_6", 0.000);
                put("10_28_5", 0.000);
                put("10_28_4", 0.000);
                put("10_28_3", 0.000);
                put("10_28_2", 0.000);
                put("10_28_10", 0.000);
                put("10_28_1", 0.001);
                put("10_27_9", 1.000);
                put("10_27_8", 0.000);
                put("10_27_7", 0.000);
                put("10_27_6", 0.000);
                put("10_27_5", 0.000);
                put("10_27_4", 0.000);
                put("10_27_3", 0.000);
                put("10_27_2", 0.000);
                put("10_27_10", 0.282);
                put("10_27_1", 0.002);
                put("10_26_9", 0.030);
                put("10_26_8", 0.022);
                put("10_26_7", 0.000);
                put("10_26_6", 0.000);
                put("10_26_5", 0.000);
                put("10_26_4", 0.000);
                put("10_26_3", 0.000);
                put("10_26_2", 0.001);
                put("10_26_10", 0.380);
                put("10_26_1", 0.004);
                put("10_25_9", 0.000);
                put("10_25_8", 1.000);
                put("10_25_7", 0.000);
                put("10_25_6", 0.000);
                put("10_25_5", 0.000);
                put("10_25_4", 0.000);
                put("10_25_3", 0.000);
                put("10_25_2", 0.001);
                put("10_25_10", 0.000);
                put("10_25_1", 0.003);
                put("10_24_9", 0.026);
                put("10_24_8", 0.000);
                put("10_24_7", 0.000);
                put("10_24_6", 0.000);
                put("10_24_5", 0.000);
                put("10_24_4", 0.000);
                put("10_24_3", 0.001);
                put("10_24_2", 0.002);
                put("10_24_10", 0.000);
                put("10_24_1", 0.014);
                put("10_23_9", 0.001);
                put("10_23_8", 0.133);
                put("10_23_7", 0.000);
                put("10_23_6", 0.000);
                put("10_23_5", 0.000);
                put("10_23_4", 0.001);
                put("10_23_3", 0.002);
                put("10_23_2", 0.009);
                put("10_23_10", 0.000);
                put("10_23_1", 0.034);
                put("10_22_9", 0.000);
                put("10_22_8", 0.000);
                put("10_22_7", 0.000);
                put("10_22_6", 0.001);
                put("10_22_5", 0.001);
                put("10_22_4", 0.002);
                put("10_22_3", 0.013);
                put("10_22_2", 0.006);
                put("10_22_10", 0.313);
                put("10_22_1", 0.036);
                put("10_21_9", 0.000);
                put("10_21_8", 0.004);
                put("10_21_7", 0.017);
                put("10_21_6", 0.583);
                put("10_21_5", 1.000);
                put("10_21_4", 0.000);
                put("10_21_3", 0.084);
                put("10_21_2", 0.004);
                put("10_21_10", 0.194);
                put("10_21_1", 0.029);

            }
        };

        HashMap<String, Double> drawStrat = new HashMap<String, Double>() {
            {
                put("9_36_1", 0.500);
                put("9_36_0", 0.500);
                put("9_35_2", 0.500);
                put("9_35_1", 0.500);
                put("9_35_0", 0.245);
                put("9_34_1", 1.000);
                put("9_34_0", 0.000);
                put("9_33_2", 0.500);
                put("9_33_1", 0.500);
                put("9_33_0", 0.000);
                put("9_32_2", 0.000);
                put("9_32_1", 0.260);
                put("9_32_0", 0.602);
                put("9_31_2", 0.849);
                put("9_31_1", 0.236);
                put("9_31_0", 0.384);
                put("9_30_2", 0.000);
                put("9_30_1", 0.980);
                put("9_30_0", 1.000);
                put("9_29_2", 1.000);
                put("9_29_1", 0.649);
                put("9_29_0", 0.586);
                put("9_28_2", 0.429);
                put("9_28_1", 0.494);
                put("9_28_0", 1.000);
                put("9_27_2", 0.655);
                put("9_27_1", 0.264);
                put("9_27_0", 0.922);
                put("9_26_2", 1.000);
                put("9_26_1", 0.616);
                put("9_26_0", 0.408);
                put("9_25_2", 0.481);
                put("9_25_1", 0.030);
                put("9_25_0", 0.100);
                put("9_24_2", 0.138);
                put("9_24_1", 0.957);
                put("9_24_0", 0.703);
                put("9_23_2", 0.348);
                put("9_23_1", 0.426);
                put("9_23_0", 0.406);
                put("9_22_2", 0.388);
                put("9_22_1", 0.114);
                put("9_22_0", 0.381);
                put("9_21_2", 0.003);
                put("9_21_1", 0.000);
                put("9_21_0", 0.330);
                put("8_41_1", 0.500);
                put("8_41_0", 0.500);
                put("8_40_0", 0.500);
                put("8_39_1", 0.500);
                put("8_39_0", 0.500);
                put("8_38_1", 0.500);
                put("8_38_0", 1.000);
                put("8_37_2", 0.500);
                put("8_37_1", 0.500);
                put("8_37_0", 0.428);
                put("8_36_2", 0.424);
                put("8_36_1", 0.600);
                put("8_36_0", 0.621);
                put("8_35_2", 0.391);
                put("8_35_1", 0.000);
                put("8_35_0", 0.597);
                put("8_34_2", 0.000);
                put("8_34_1", 0.144);
                put("8_34_0", 0.482);
                put("8_33_2", 0.785);
                put("8_33_1", 0.922);
                put("8_33_0", 0.000);
                put("8_32_2", 0.136);
                put("8_32_1", 0.056);
                put("8_32_0", 0.006);
                put("8_31_2", 0.653);
                put("8_31_1", 0.010);
                put("8_31_0", 0.391);
                put("8_30_2", 0.064);
                put("8_30_1", 0.283);
                put("8_30_0", 1.000);
                put("8_29_2", 1.000);
                put("8_29_1", 0.151);
                put("8_29_0", 0.490);
                put("8_28_2", 0.405);
                put("8_28_1", 0.715);
                put("8_28_0", 0.971);
                put("8_27_2", 0.032);
                put("8_27_1", 0.563);
                put("8_27_0", 0.588);
                put("8_26_2", 0.068);
                put("8_26_1", 0.682);
                put("8_26_0", 0.228);
                put("8_25_2", 0.394);
                put("8_25_1", 0.184);
                put("8_25_0", 0.200);
                put("8_24_2", 0.132);
                put("8_24_1", 0.420);
                put("8_24_0", 0.129);
                put("8_23_2", 0.269);
                put("8_23_1", 0.374);
                put("8_23_0", 0.721);
                put("8_22_2", 0.434);
                put("8_22_1", 0.462);
                put("8_22_0", 0.214);
                put("8_21_2", 0.005);
                put("8_21_1", 0.010);
                put("8_21_0", 0.015);
                put("7_44_1", 0.500);
                put("7_44_0", 0.000);
                put("7_43_1", 0.500);
                put("7_42_0", 0.500);
                put("7_41_1", 0.500);
                put("7_41_0", 1.000);
                put("7_40_2", 0.500);
                put("7_40_1", 0.556);
                put("7_40_0", 0.000);
                put("7_39_2", 0.500);
                put("7_39_1", 0.500);
                put("7_39_0", 0.921);
                put("7_38_2", 0.000);
                put("7_38_1", 0.000);
                put("7_38_0", 0.471);
                put("7_37_2", 1.000);
                put("7_37_1", 0.680);
                put("7_37_0", 0.601);
                put("7_36_2", 0.852);
                put("7_36_1", 0.286);
                put("7_36_0", 0.804);
                put("7_35_2", 0.147);
                put("7_35_1", 0.084);
                put("7_35_0", 0.955);
                put("7_34_2", 0.026);
                put("7_34_1", 0.135);
                put("7_34_0", 0.490);
                put("7_33_2", 0.004);
                put("7_33_1", 0.344);
                put("7_33_0", 0.387);
                put("7_32_2", 0.987);
                put("7_32_1", 0.016);
                put("7_32_0", 0.158);
                put("7_31_2", 0.736);
                put("7_31_1", 0.031);
                put("7_31_0", 0.016);
                put("7_30_2", 0.168);
                put("7_30_1", 0.843);
                put("7_30_0", 0.347);
                put("7_29_2", 0.940);
                put("7_29_1", 0.404);
                put("7_29_0", 0.322);
                put("7_28_2", 0.314);
                put("7_28_1", 0.250);
                put("7_28_0", 0.464);
                put("7_27_2", 0.169);
                put("7_27_1", 0.024);
                put("7_27_0", 0.609);
                put("7_26_2", 0.734);
                put("7_26_1", 0.338);
                put("7_26_0", 0.606);
                put("7_25_2", 0.308);
                put("7_25_1", 0.064);
                put("7_25_0", 0.297);
                put("7_24_2", 0.937);
                put("7_24_1", 0.213);
                put("7_24_0", 0.014);
                put("7_23_2", 0.858);
                put("7_23_1", 0.996);
                put("7_23_0", 0.337);
                put("7_22_2", 0.423);
                put("7_22_1", 0.594);
                put("7_22_0", 0.999);
                put("7_21_2", 0.017);
                put("7_21_1", 0.006);
                put("7_21_0", 0.795);
                put("6_47_1", 0.500);
                put("6_47_0", 1.000);
                put("6_46_0", 0.000);
                put("6_45_1", 0.500);
                put("6_45_0", 0.000);
                put("6_44_1", 0.500);
                put("6_44_0", 0.247);
                put("6_43_1", 0.500);
                put("6_43_0", 0.493);
                put("6_42_2", 0.500);
                put("6_42_1", 0.984);
                put("6_42_0", 0.972);
                put("6_41_2", 0.500);
                put("6_41_1", 0.000);
                put("6_41_0", 0.682);
                put("6_40_2", 0.456);
                put("6_40_1", 0.851);
                put("6_40_0", 0.468);
                put("6_39_2", 0.859);
                put("6_39_1", 0.996);
                put("6_39_0", 0.599);
                put("6_38_2", 0.750);
                put("6_38_1", 0.104);
                put("6_38_0", 0.096);
                put("6_37_2", 0.614);
                put("6_37_1", 0.640);
                put("6_37_0", 0.487);
                put("6_36_2", 0.314);
                put("6_36_1", 0.158);
                put("6_36_0", 0.097);
                put("6_35_2", 0.802);
                put("6_35_1", 0.249);
                put("6_35_0", 0.082);
                put("6_34_2", 0.728);
                put("6_34_1", 0.487);
                put("6_34_0", 0.725);
                put("6_33_2", 0.931);
                put("6_33_1", 0.239);
                put("6_33_0", 0.809);
                put("6_32_2", 0.020);
                put("6_32_1", 0.006);
                put("6_32_0", 0.055);
                put("6_31_2", 0.055);
                put("6_31_1", 0.813);
                put("6_31_0", 0.536);
                put("6_30_2", 0.244);
                put("6_30_1", 0.285);
                put("6_30_0", 0.992);
                put("6_29_2", 0.018);
                put("6_29_1", 0.519);
                put("6_29_0", 0.499);
                put("6_28_2", 0.927);
                put("6_28_1", 0.359);
                put("6_28_0", 0.937);
                put("6_27_2", 0.175);
                put("6_27_1", 0.018);
                put("6_27_0", 0.391);
                put("6_26_2", 0.570);
                put("6_26_1", 0.353);
                put("6_26_0", 0.778);
                put("6_25_2", 0.441);
                put("6_25_1", 0.374);
                put("6_25_0", 0.933);
                put("6_24_2", 0.463);
                put("6_24_1", 0.640);
                put("6_24_0", 0.612);
                put("6_23_2", 0.484);
                put("6_23_1", 0.259);
                put("6_23_0", 0.836);
                put("6_22_2", 0.442);
                put("6_22_1", 0.885);
                put("6_22_0", 0.005);
                put("6_21_2", 0.000);
                put("6_21_1", 0.000);
                put("6_21_0", 0.976);
                put("5_49_2", 0.500);
                put("5_49_1", 0.500);
                put("5_49_0", 0.500);
                put("5_48_2", 0.500);
                put("5_48_1", 1.000);
                put("5_48_0", 0.000);
                put("5_47_2", 0.500);
                put("5_47_1", 0.500);
                put("5_47_0", 0.914);
                put("5_46_2", 0.792);
                put("5_46_1", 0.000);
                put("5_46_0", 0.903);
                put("5_45_2", 1.000);
                put("5_45_1", 0.230);
                put("5_45_0", 0.602);
                put("5_44_2", 0.000);
                put("5_44_1", 0.466);
                put("5_44_0", 0.481);
                put("5_43_2", 0.614);
                put("5_43_1", 0.181);
                put("5_43_0", 0.651);
                put("5_42_2", 1.000);
                put("5_42_1", 0.227);
                put("5_42_0", 0.116);
                put("5_41_2", 0.517);
                put("5_41_1", 0.171);
                put("5_41_0", 0.424);
                put("5_40_2", 0.633);
                put("5_40_1", 0.696);
                put("5_40_0", 0.358);
                put("5_39_2", 0.117);
                put("5_39_1", 0.087);
                put("5_39_0", 0.623);
                put("5_38_2", 0.936);
                put("5_38_1", 0.973);
                put("5_38_0", 0.580);
                put("5_37_2", 0.543);
                put("5_37_1", 0.963);
                put("5_37_0", 0.521);
                put("5_36_2", 0.014);
                put("5_36_1", 0.030);
                put("5_36_0", 0.844);
                put("5_35_2", 0.150);
                put("5_35_1", 0.264);
                put("5_35_0", 0.773);
                put("5_34_2", 0.015);
                put("5_34_1", 0.045);
                put("5_34_0", 0.637);
                put("5_33_2", 0.049);
                put("5_33_1", 0.685);
                put("5_33_0", 0.532);
                put("5_32_2", 0.792);
                put("5_32_1", 0.351);
                put("5_32_0", 0.992);
                put("5_31_2", 0.370);
                put("5_31_1", 0.493);
                put("5_31_0", 0.321);
                put("5_30_2", 0.156);
                put("5_30_1", 0.038);
                put("5_30_0", 0.902);
                put("5_29_2", 0.092);
                put("5_29_1", 0.013);
                put("5_29_0", 0.100);
                put("5_28_2", 0.093);
                put("5_28_1", 0.151);
                put("5_28_0", 0.136);
                put("5_27_2", 0.047);
                put("5_27_1", 0.012);
                put("5_27_0", 0.897);
                put("5_26_2", 0.001);
                put("5_26_1", 0.025);
                put("5_26_0", 0.422);
                put("5_25_2", 0.223);
                put("5_25_1", 0.016);
                put("5_25_0", 1.000);
                put("5_24_2", 0.012);
                put("5_24_1", 0.288);
                put("5_24_0", 0.977);
                put("5_23_2", 0.002);
                put("5_23_1", 0.042);
                put("5_23_0", 0.009);
                put("5_22_2", 0.421);
                put("5_22_1", 0.126);
                put("5_22_0", 0.998);
                put("5_21_2", 0.001);
                put("5_21_1", 0.000);
                put("5_21_0", 0.997);
                put("4_49_2", 0.500);
                put("4_49_1", 0.500);
                put("4_49_0", 0.000);
                put("4_48_2", 0.500);
                put("4_48_1", 0.183);
                put("4_48_0", 0.410);
                put("4_47_2", 0.500);
                put("4_47_1", 0.368);
                put("4_47_0", 0.988);
                put("4_46_2", 0.811);
                put("4_46_1", 0.968);
                put("4_46_0", 0.920);
                put("4_45_2", 1.000);
                put("4_45_1", 0.411);
                put("4_45_0", 0.331);
                put("4_44_2", 0.332);
                put("4_44_1", 0.333);
                put("4_44_0", 0.621);
                put("4_43_2", 0.687);
                put("4_43_1", 0.625);
                put("4_43_0", 0.776);
                put("4_42_2", 0.282);
                put("4_42_1", 0.461);
                put("4_42_0", 0.021);
                put("4_41_2", 0.262);
                put("4_41_1", 0.452);
                put("4_41_0", 0.087);
                put("4_40_2", 0.797);
                put("4_40_1", 0.297);
                put("4_40_0", 0.539);
                put("4_39_2", 0.058);
                put("4_39_1", 0.015);
                put("4_39_0", 0.640);
                put("4_38_2", 0.093);
                put("4_38_1", 0.567);
                put("4_38_0", 0.649);
                put("4_37_2", 0.785);
                put("4_37_1", 0.094);
                put("4_37_0", 0.970);
                put("4_36_2", 0.453);
                put("4_36_1", 0.045);
                put("4_36_0", 0.915);
                put("4_35_2", 0.096);
                put("4_35_1", 0.041);
                put("4_35_0", 0.581);
                put("4_34_2", 0.080);
                put("4_34_1", 0.006);
                put("4_34_0", 0.143);
                put("4_33_2", 0.037);
                put("4_33_1", 0.254);
                put("4_33_0", 0.269);
                put("4_32_2", 0.110);
                put("4_32_1", 0.001);
                put("4_32_0", 0.865);
                put("4_31_2", 0.254);
                put("4_31_1", 0.082);
                put("4_31_0", 0.830);
                put("4_30_2", 0.389);
                put("4_30_1", 0.025);
                put("4_30_0", 0.336);
                put("4_29_2", 0.032);
                put("4_29_1", 0.105);
                put("4_29_0", 0.200);
                put("4_28_2", 0.004);
                put("4_28_1", 0.001);
                put("4_28_0", 0.360);
                put("4_27_2", 0.058);
                put("4_27_1", 0.022);
                put("4_27_0", 0.994);
                put("4_26_2", 0.001);
                put("4_26_1", 0.012);
                put("4_26_0", 0.009);
                put("4_25_2", 0.048);
                put("4_25_1", 0.017);
                put("4_25_0", 0.999);
                put("4_24_2", 0.007);
                put("4_24_1", 0.149);
                put("4_24_0", 0.979);
                put("4_23_2", 0.000);
                put("4_23_1", 0.107);
                put("4_23_0", 0.926);
                put("4_22_2", 0.084);
                put("4_22_1", 0.003);
                put("4_22_0", 0.985);
                put("4_21_2", 0.000);
                put("4_21_1", 0.000);
                put("4_21_0", 0.995);
                put("3_49_2", 0.000);
                put("3_49_1", 0.000);
                put("3_49_0", 0.072);
                put("3_48_2", 0.000);
                put("3_48_1", 0.577);
                put("3_48_0", 0.087);
                put("3_47_2", 0.683);
                put("3_47_1", 0.329);
                put("3_47_0", 0.004);
                put("3_46_2", 0.537);
                put("3_46_1", 0.975);
                put("3_46_0", 0.355);
                put("3_45_2", 0.194);
                put("3_45_1", 0.158);
                put("3_45_0", 0.211);
                put("3_44_2", 0.221);
                put("3_44_1", 0.000);
                put("3_44_0", 0.595);
                put("3_43_2", 0.305);
                put("3_43_1", 0.018);
                put("3_43_0", 0.097);
                put("3_42_2", 0.704);
                put("3_42_1", 0.009);
                put("3_42_0", 0.265);
                put("3_41_2", 0.253);
                put("3_41_1", 0.211);
                put("3_41_0", 0.991);
                put("3_40_2", 0.560);
                put("3_40_1", 0.245);
                put("3_40_0", 0.557);
                put("3_39_2", 0.357);
                put("3_39_1", 0.062);
                put("3_39_0", 0.730);
                put("3_38_2", 0.322);
                put("3_38_1", 0.275);
                put("3_38_0", 0.162);
                put("3_37_2", 0.191);
                put("3_37_1", 0.395);
                put("3_37_0", 0.085);
                put("3_36_2", 0.311);
                put("3_36_1", 0.148);
                put("3_36_0", 0.724);
                put("3_35_2", 0.190);
                put("3_35_1", 0.706);
                put("3_35_0", 0.739);
                put("3_34_2", 0.046);
                put("3_34_1", 0.089);
                put("3_34_0", 0.130);
                put("3_33_2", 0.007);
                put("3_33_1", 0.402);
                put("3_33_0", 0.990);
                put("3_32_2", 0.031);
                put("3_32_1", 0.056);
                put("3_32_0", 0.418);
                put("3_31_2", 0.007);
                put("3_31_1", 0.142);
                put("3_31_0", 0.712);
                put("3_30_2", 0.012);
                put("3_30_1", 0.012);
                put("3_30_0", 0.168);
                put("3_29_2", 0.000);
                put("3_29_1", 0.257);
                put("3_29_0", 0.001);
                put("3_28_2", 0.011);
                put("3_28_1", 0.013);
                put("3_28_0", 0.319);
                put("3_27_2", 0.020);
                put("3_27_1", 0.013);
                put("3_27_0", 0.375);
                put("3_26_2", 0.000);
                put("3_26_1", 0.009);
                put("3_26_0", 0.024);
                put("3_25_2", 0.003);
                put("3_25_1", 0.014);
                put("3_25_0", 1.000);
                put("3_24_2", 0.000);
                put("3_24_1", 0.047);
                put("3_24_0", 0.995);
                put("3_23_2", 0.004);
                put("3_23_1", 0.008);
                put("3_23_0", 0.604);
                put("3_22_2", 0.000);
                put("3_22_1", 0.004);
                put("3_22_0", 0.825);
                put("3_21_2", 0.001);
                put("3_21_1", 0.001);
                put("3_21_0", 1.000);
                put("2_49_2", 0.267);
                put("2_49_1", 0.000);
                put("2_49_0", 0.001);
                put("2_48_2", 0.162);
                put("2_48_1", 0.003);
                put("2_48_0", 0.207);
                put("2_47_2", 0.700);
                put("2_47_1", 0.018);
                put("2_47_0", 0.541);
                put("2_46_2", 0.263);
                put("2_46_1", 0.598);
                put("2_46_0", 0.044);
                put("2_45_2", 0.978);
                put("2_45_1", 0.318);
                put("2_45_0", 0.110);
                put("2_44_2", 0.048);
                put("2_44_1", 0.964);
                put("2_44_0", 0.051);
                put("2_43_2", 0.618);
                put("2_43_1", 0.024);
                put("2_43_0", 0.201);
                put("2_42_2", 0.363);
                put("2_42_1", 0.170);
                put("2_42_0", 0.218);
                put("2_41_2", 0.072);
                put("2_41_1", 0.427);
                put("2_41_0", 0.536);
                put("2_40_2", 0.282);
                put("2_40_1", 0.065);
                put("2_40_0", 0.584);
                put("2_39_2", 0.688);
                put("2_39_1", 0.144);
                put("2_39_0", 0.029);
                put("2_38_2", 0.007);
                put("2_38_1", 0.352);
                put("2_38_0", 0.658);
                put("2_37_2", 0.034);
                put("2_37_1", 0.170);
                put("2_37_0", 0.892);
                put("2_36_2", 0.402);
                put("2_36_1", 0.000);
                put("2_36_0", 0.154);
                put("2_35_2", 0.549);
                put("2_35_1", 0.072);
                put("2_35_0", 0.658);
                put("2_34_2", 0.003);
                put("2_34_1", 0.006);
                put("2_34_0", 0.876);
                put("2_33_2", 0.027);
                put("2_33_1", 0.020);
                put("2_33_0", 0.001);
                put("2_32_2", 0.062);
                put("2_32_1", 0.008);
                put("2_32_0", 0.826);
                put("2_31_2", 0.003);
                put("2_31_1", 0.013);
                put("2_31_0", 0.305);
                put("2_30_2", 0.006);
                put("2_30_1", 0.000);
                put("2_30_0", 0.056);
                put("2_29_2", 0.001);
                put("2_29_1", 0.000);
                put("2_29_0", 0.098);
                put("2_28_2", 0.016);
                put("2_28_1", 0.004);
                put("2_28_0", 0.091);
                put("2_27_2", 0.006);
                put("2_27_1", 0.004);
                put("2_27_0", 0.091);
                put("2_26_2", 0.003);
                put("2_26_1", 0.009);
                put("2_26_0", 0.001);
                put("2_25_2", 0.006);
                put("2_25_1", 0.001);
                put("2_25_0", 0.982);
                put("2_24_2", 0.015);
                put("2_24_1", 0.015);
                put("2_24_0", 0.891);
                put("2_23_2", 0.015);
                put("2_23_1", 0.008);
                put("2_23_0", 0.001);
                put("2_22_2", 0.018);
                put("2_22_1", 0.004);
                put("2_22_0", 0.181);
                put("2_21_2", 0.000);
                put("2_21_1", 0.000);
                put("2_21_0", 0.940);
                put("1_49_2", 0.074);
                put("1_49_1", 0.216);
                put("1_49_0", 0.000);
                put("1_48_2", 0.012);
                put("1_48_1", 0.120);
                put("1_48_0", 0.000);
                put("1_47_2", 0.859);
                put("1_47_1", 0.046);
                put("1_47_0", 0.813);
                put("1_46_2", 0.087);
                put("1_46_1", 0.076);
                put("1_46_0", 0.282);
                put("1_45_2", 0.092);
                put("1_45_1", 0.000);
                put("1_45_0", 0.062);
                put("1_44_2", 0.037);
                put("1_44_1", 0.646);
                put("1_44_0", 0.267);
                put("1_43_2", 0.123);
                put("1_43_1", 0.085);
                put("1_43_0", 0.191);
                put("1_42_2", 0.766);
                put("1_42_1", 0.964);
                put("1_42_0", 0.046);
                put("1_41_2", 0.005);
                put("1_41_1", 0.001);
                put("1_41_0", 0.466);
                put("1_40_2", 0.117);
                put("1_40_1", 0.217);
                put("1_40_0", 0.236);
                put("1_39_2", 0.024);
                put("1_39_1", 0.000);
                put("1_39_0", 0.053);
                put("1_38_2", 0.000);
                put("1_38_1", 0.036);
                put("1_38_0", 0.165);
                put("1_37_2", 0.279);
                put("1_37_1", 0.049);
                put("1_37_0", 0.998);
                put("1_36_2", 0.001);
                put("1_36_1", 0.094);
                put("1_36_0", 0.168);
                put("1_35_2", 0.007);
                put("1_35_1", 0.003);
                put("1_35_0", 0.005);
                put("1_34_2", 0.071);
                put("1_34_1", 0.037);
                put("1_34_0", 0.631);
                put("1_33_2", 0.003);
                put("1_33_1", 0.028);
                put("1_33_0", 0.461);
                put("1_32_2", 0.007);
                put("1_32_1", 0.030);
                put("1_32_0", 0.001);
                put("1_31_2", 0.002);
                put("1_31_1", 0.101);
                put("1_31_0", 0.358);
                put("1_30_2", 0.006);
                put("1_30_1", 0.012);
                put("1_30_0", 0.002);
                put("1_29_2", 0.006);
                put("1_29_1", 0.191);
                put("1_29_0", 0.001);
                put("1_28_2", 0.003);
                put("1_28_1", 0.071);
                put("1_28_0", 0.003);
                put("1_27_2", 0.002);
                put("1_27_1", 0.040);
                put("1_27_0", 0.013);
                put("1_26_2", 0.015);
                put("1_26_1", 0.028);
                put("1_26_0", 0.033);
                put("1_25_2", 0.001);
                put("1_25_1", 0.000);
                put("1_25_0", 0.009);
                put("1_24_2", 0.006);
                put("1_24_1", 0.005);
                put("1_24_0", 0.001);
                put("1_23_2", 0.001);
                put("1_23_1", 0.032);
                put("1_23_0", 0.022);
                put("1_22_2", 0.000);
                put("1_22_1", 0.021);
                put("1_22_0", 0.051);
                put("1_21_2", 0.000);
                put("1_21_1", 0.009);
                put("1_21_0", 0.833);

            }
        };

        /*
         * Order of strategy parameters:
         *
         * maxIsolatedSingleDeadwood
         * minIsolatedSingleDiscardTurn
         * maxSingleDeadwood
         * minSingleDiscardTurn
         * minPickupDifference
         * canteloupe
         */
        generalStrategy = new GeneralStrategy(MyGinRummyUtil.decoded("344662"), knockStrat, drawStrat);

    }

    @Override
    public void startGame(int playerNum, int startingPlayerNum, Card[] cards) {
        this.playerNum = playerNum;

        state = new State(new ArrayList<>(Arrays.asList(cards)));

        oppMelds = null;
        opponentKnocked = false;

    }

    @Override
    public boolean willDrawFaceUpCard(Card card) {
        int card_id = card.getId();
        // If first turn, record the face-up card. All other unseen face-up cards should be recorded in reportDiscard()
        if(state.getTurn() == 0) {
            state.addToSeen(card_id);
            state.increaseTopCard();
            state.decreaseNumRemaining();
        }

        //Card is our face-up
        state.setFaceUp(card_id);

        return willDrawFaceUpCard(state.getHand(), state.getFaceUp());

    }

    /**
     * @param hand A hand of cards
     * @param card_id The id of the face-up card
     * @return true if we would pick up card_id with the given hand
     */
    public boolean willDrawFaceUpCard(long hand, int card_id) {

        /*
         * Get the improvement in deadwood in our hand from picking up the face-up and discarding our worst card
         */
        int improvement = MyGinRummyUtil.getImprovement(hand, card_id);

        /*
         * If improvement is positive and drawing the face-up makes a new meld, draw face-up
         */
        if(improvement > 0 && MyGinRummyUtil.makesNewMeld(hand, card_id))
            return true;

        if (USE_MODIFIED_DRAW) {
            return false;
        }
        else {
            /*
             * If improvement is above generalStrategy.getMinPickupDifference() and at least generalStrategy.getCanteloupe() greater
             * than the expected improvement from drawing face-down, draw face-up.
             */
            if(improvement >= generalStrategy.getMinPickupDifference() &&
                    improvement - MyGinRummyUtil.expectedDeadwoodForNextDraw(state) >= generalStrategy.getCanteloupe()) return true;

            /*
             * Add the face-up to our hand
             */
            long newCards = MyGinRummyUtil.add(hand, card_id);

            /*
             * If we would consider discarding the face-up if it were in our hand, don't draw it.
             */
            long preferred = MyGinRummyUtil.findHighestDiscards(newCards, -1, -1, 2);
            if(MyGinRummyUtil.contains(preferred, card_id))
                return false;

            /*
             * Get the minimum number of turns it would take to meld the face-up.
             * 0: Already melded.
             * 1: Could potentially meld after 1 draw.
             * 2: It would take 2+ turns at minimum to meld this card.
             */
            int minDrawsToMeld = 0;

            if(MyGinRummyUtil.contains(MyGinRummyUtil.getIsolatedSingles(newCards, 0L, state), card_id)) minDrawsToMeld = 2;
            else if(MyGinRummyUtil.contains(MyGinRummyUtil.getSingles(newCards, 0L, state), card_id)) minDrawsToMeld = 1;


            /*
             * If the above heuristics don't settle things, turn to the CFR-informed strategy.
             */
            String infoset = improvement + "_" + state.getTopCard() + "_" + minDrawsToMeld;

            double prob = generalStrategy.getDrawAt(infoset);
            return random.nextDouble() < prob;

			/*
	        if(improvement < 2
	                && MyGinRummyUtil.contains(MyGinRummyUtil.getIsolatedSingles(newCards, 0L, state), card_id)) return false;
	        else if(improvement < 3
	                && MyGinRummyUtil.contains(MyGinRummyUtil.getSingles(newCards, 0L, state), card_id)) return false;

	        //Then, look at all within 2 of the highest discards. If the list doesn't contain the face-up, pick it up. Otherwise, don't.
	        long preferred = MyGinRummyUtil.findHighestDiscards(newCards, -1, -1, 1);


			 */
            /*
             * If in preferred, don't pick it up, otherwise, put it to cfr.
             */

            //return !MyGinRummyUtil.contains(preferred, card_id);
        }
    }

    @Override
    public void reportDraw(int playerNum, Card drawnCard) {

        //If drawn card is null or its id != the face up, player drew face-down. Decrease numRemaining, and add to oppForwent
        if(drawnCard == null || drawnCard.getId() != state.getFaceUp()) {
            state.decreaseNumRemaining();
            state.increaseTopCard();
            if(playerNum != this.playerNum)
                state.addToOppForwent(state.getFaceUp());
        }

        // Ignore other player draws.  Add to cards if playerNum is this player.
        if (playerNum == this.playerNum) {

            state.addToHand(drawnCard.getId());
            this.drawn = drawnCard.getId();

        }
        //If the other player drew, and drawnCard isn't null, other player drew face-up.
        else {
            if(drawnCard != null) {
                if(state.getFaceUp() == -1) state.setFaceUp(drawnCard);
                state.addToOppHand(drawnCard.getId());
            }
        }
    }

    @Override
    public Card getDiscard() {

        ArrayList<DiscardMetric> metrics = getDiscardMetrics(state);
        metrics.sort((DiscardMetric dm1, DiscardMetric dm2) -> dm1.score < dm2.score?-1:dm1.score>dm2.score?1:0);
        return metrics.get(0).discard;
    }


    @Override
    public void reportDiscard(int playerNum, Card discardedCard) {
        // Ignore other player discards.  Remove from cards if playerNum is this player.
        if (playerNum == this.playerNum) {
            state.removeFromHand(discardedCard.getId());
            state.nextTurn();
        }

        //If we knew the discarded card was in the opponent's hand, remove. If we didn't, add it to seen.
        else {
            state.addToSeen(discardedCard.getId());
            state.removeFromOppHand(discardedCard.getId());
        }
    }

    @Override
    public ArrayList<ArrayList<Card>> getFinalMelds() {

        ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets;
        int deadwood;

        /*
         * TODO:
         *  -Try to find the best melds to minimize opponent layoff. Make sure to balance with deadwood to prevent undercut.
         *          -Based off of what we know is in their hand, and what cards we haven't seen. Account for # of remaining cards.
         *              What's the probability that the opp has a given unseen card?
         *          -Runs have more potential locations for layoff than 3 or 4 of a kind.
         *          -Laying off a low-value card is less important than a high-value one. May not be significant.
         */
        bestMeldSets = MyGinRummyUtil.cardsToBestMeldSets(MyGinRummyUtil.bitstringToCards(state.getHand()));
        deadwood = bestMeldSets.isEmpty() ?
                MyGinRummyUtil.getDeadwoodPoints(MyGinRummyUtil.bitstringToCards(state.getHand())) :
                MyGinRummyUtil.getDeadwoodPoints(bestMeldSets.get(0), MyGinRummyUtil.bitstringToCards(state.getHand()));

        // Check if deadwood of maximal meld is low enough to go out.


        //Only knock if deadwood is both less than or equal to 10 and strategy.getMaxKnockDeadwood() [0].

        if (!opponentKnocked &&
                (bestMeldSets.isEmpty() || deadwood > MyGinRummyUtil.MAX_DEADWOOD))
            return null;
        else if (!opponentKnocked) {
            String k = state.getFaceUpPrevious() == -1? "" : deadwood + "_" + state.getTopCard() + "_" + GinRummyUtil.getDeadwoodPoints(Card.getCard(state.getFaceUpPrevious()));
            double prob = generalStrategy.getKnockAt(k);
            if(deadwood == 0 || random.nextDouble() < prob) {
                //Select the meld configuration to submit.

                /*
                ArrayList<ArrayList<Card>> bestMeldSet = null;
                double minExpectedLayoff = Double.MAX_VALUE;
                for(ArrayList<ArrayList<Card>> meldSet : bestMeldSets) {
                    ArrayList<Card> layoff = new ArrayList<>();

                    // Add all cards to layoff who could be inserted into our hand
                    for (ArrayList<Card> meld : meldSet) {
                        // Meld of cards of same rank
                        if (meld.get(0).getRank() == meld.get(1).getRank()) {
                            layoff.addAll(
                                    MyGinRummyUtil.getSameRank(MyGinRummyUtil.bitstringToCards(
                                            MyGinRummyUtil.addAll(state.getOppHand(), state.getUnaccounted())), meld.get(0)));
                        }

                        // Cards of same suit
                        else {
                            layoff.addAll(MyGinRummyUtil.getSameSuit(MyGinRummyUtil.bitstringToCards(
                                    MyGinRummyUtil.addAll(state.getOppHand(), state.getUnaccounted())),
                                    meld.get(0), 1));
                            layoff.addAll(MyGinRummyUtil.getSameSuit(MyGinRummyUtil.bitstringToCards(
                                    MyGinRummyUtil.addAll(state.getOppHand(), state.getUnaccounted())),
                                    meld.get(meld.size() - 1), 1));
                        }
                    }

                 */

                    /*
                     * The sum of the deadwood of each layoff card * the probability that the opponent has said card
                     * is expectedLayoff. If expectedLayoff < minExpectedLayoff, it is the new minimum, so assign
                     * bestMeldSet to the current meld set. In the end, return the meld set with the lowest expectedLayoff.
                     */

                    /*
                    double expectedLayoff = 0d;
                    for(Card card : layoff) {
                        //If the card is in an opponent meld, we don't expect them to try to lay it off.
                        if(MyGinRummyUtil.canOpponentMeld(card, state)) continue;
                        expectedLayoff += GinRummyUtil.getDeadwoodPoints(card) *
                                MyGinRummyUtil.getProbabilityThatOpponentHasUnseenCard(card, state);
                    }

                    if(expectedLayoff < minExpectedLayoff) {
                        minExpectedLayoff = expectedLayoff;
                        bestMeldSet = meldSet;
                    }

                }

                     */

                ArrayList<ArrayList<Card>> bestMeldSet = MyGinRummyUtil.getBestBestMeldSet(state);

                return bestMeldSet;
            }
            else return null;
        }


        else {
            ArrayList<Card> layoff = new ArrayList<>();

            if(bestMeldSets.isEmpty()) return new ArrayList<>();

            //Add all cards to layoff who could be inserted into opponent hand
            for(ArrayList<Card> meld : oppMelds) {
                //Meld of cards of same rank
                if(meld.get(0).getRank() == meld.get(1).getRank()) {
                    layoff.addAll(MyGinRummyUtil.getSameRank(MyGinRummyUtil.bitstringToCards(state.getHand()), meld.get(0)));
                }

                //Cards of same suit
                else {
                    layoff.addAll(MyGinRummyUtil.getSameSuit(MyGinRummyUtil.bitstringToCards(state.getHand()), meld.get(0), 1));
                    layoff.addAll(MyGinRummyUtil.getSameSuit(MyGinRummyUtil.bitstringToCards(state.getHand()), meld.get(meld.size() - 1), 1));
                }
            }

            /*
             * Deadwood cards will be laid off no matter what, so check potential layoffs in melds to see if
             * a better config is available.
             */

            ArrayList<Card> temp;
            ArrayList<ArrayList<Card>> bestMeldSet = bestMeldSets.get(0);
            int minDeadwood = deadwood;

            if(layoff.isEmpty()) return bestMeldSet;

            //Go through EVERY permutation of potential layoffs to find the one that leaves the best deadwood
            for(int i = 0; i < Math.pow(2, layoff.size()); i++) {
                String bString = Integer.toBinaryString(i);
                temp = MyGinRummyUtil.bitstringToCards(state.getHand());

                for(int j = 0; j < bString.length(); j++) {
                    if(bString.charAt(bString.length() - 1 - j) == '1') {
                        temp.remove(layoff.get(j));
                    }
                }

                ArrayList<ArrayList<ArrayList<Card>>> meldSets = MyGinRummyUtil.cardsToBestMeldSets(temp);

                if(meldSets.isEmpty()) {
                    if(MyGinRummyUtil.getDeadwoodPoints(temp) < minDeadwood) {
                        minDeadwood = MyGinRummyUtil.getDeadwoodPoints(temp);
                        bestMeldSet = new ArrayList<>();
                    }
                }

                else {
                    if(MyGinRummyUtil.getDeadwoodPoints(meldSets.get(0), temp) < minDeadwood) {
                        minDeadwood = MyGinRummyUtil.getDeadwoodPoints(meldSets.get(0), temp);
                        bestMeldSet = meldSets.get(0);
                    }
                }
            }

            return bestMeldSet;

        }

    }

    @Override
    public void reportFinalMelds(int playerNum, ArrayList<ArrayList<Card>> melds) {
        // Melds ignored by simple player, but could affect which melds to make for complex player.
        if(playerNum != this.playerNum) {
            opponentKnocked = true;
            oppMelds = melds;
        }
    }

    @Override
    public void reportScores(int[] scores) {
        // Ignored by simple player, but could affect strategy of more complex player.
    }

    @Override
    public void reportLayoff(int playerNum, Card layoffCard, ArrayList<Card> opponentMeld) {
        // Ignored by simple player, but could affect strategy of more complex player.

    }

    @Override
    public void reportFinalHand(int playerNum, ArrayList<Card> hand) {
        // Ignored by simple player, but could affect strategy of more complex player.
    }

    /**
     * Class to record details about the current state of the game
     */
    static class State {

        // <editor-fold desc="Instance Variables">
        /**
         * Our hand
         */
        private long hand;

        /**
         * Cards which have been seen by the player
         */
        private long seen;

        /**
         * Cards which we know are currently in the opponent hand
         */
        private long oppHand;

        /**
         * Cards which we have seen the opponent discard
         */
        private long oppDiscard;

        /**
         * Cards which the opponent has ignored when face-up
         */
        private long oppForwent;

        /**
         * The id of the previous face-up card
         */
        private int faceUpPrevious;

        /**
         * The id of the current face-up card
         */
        private int faceUp;

        /**
         * Index into deck for top card
         */
        private int topCard;

        /**
         * Current turn of the game
         */
        private int turn;

        /**
         * Number of remaining cards in the deck
         */
        private int num_remaining;
        // </editor-fold>

        State(ArrayList<Card> hand) {

            this.hand = MyGinRummyUtil.cardsToBitstring(hand);
            seen = this.hand;
            oppHand = 0L;
            oppDiscard = 0L;
            oppForwent = 0L;

            turn = 0;
            topCard = 20;
            faceUp = faceUp = -1;
            num_remaining = 32;
        }

        /**
         * Clear the game state to be used again
         */
        void clear() {
            hand = seen = oppHand = oppDiscard = 0L;
            faceUp = faceUpPrevious = turn = 0;
            num_remaining = 32;
            topCard = 20;
        }

        // <editor-fold desc="Methods to add and remove cards from the lists recorded in
        // this class">
        /**
         * The following methods are for adding and removing cards/sets of cards from a
         * hand. I don't think they need to documented.
         */
        public void addToHand(int card_id) {
            this.hand = MyGinRummyUtil.add(this.hand, card_id);
        }

        public void addAllToHand(long cards) {
            this.hand = MyGinRummyUtil.addAll(this.hand, cards);
        }

        public void removeFromHand(int card_id) {
            this.hand = MyGinRummyUtil.remove(this.hand, card_id);
        }

        public void removeAllFromHand(long cards) {
            this.hand = MyGinRummyUtil.removeAll(this.hand, cards);
        }

        public void addToSeen(int card_id) {
            this.seen = MyGinRummyUtil.add(this.seen, card_id);
        }

        public void addAllToSeen(long cards) {
            this.seen = MyGinRummyUtil.addAll(this.seen, cards);
        }

        public void removeFromSeen(int card_id) {
            this.seen = MyGinRummyUtil.remove(this.seen, card_id);
        }

        public void removeAllFromSeen(long cards) {
            this.seen = MyGinRummyUtil.removeAll(this.seen, cards);
        }

        public void addToOppHand(int card_id) {
            this.oppHand = MyGinRummyUtil.add(this.oppHand, card_id);
        }

        public void addAllToOppHand(long cards) {
            this.oppHand = MyGinRummyUtil.addAll(this.oppHand, cards);
        }

        public void removeFromOppHand(int card_id) {
            this.oppHand = MyGinRummyUtil.remove(this.oppHand, card_id);
        }

        public void removeAllFromOppHand(long cards) {
            this.oppHand = MyGinRummyUtil.removeAll(this.oppHand, cards);
        }

        public void addToOppDiscard(int card_id) {
            this.oppDiscard = MyGinRummyUtil.add(this.oppDiscard, card_id);
        }

        public void addAllToOppDiscard(long cards) {
            this.oppDiscard = MyGinRummyUtil.addAll(this.oppDiscard, cards);
        }

        public void removeFromOppDiscard(int card_id) {
            this.oppDiscard = MyGinRummyUtil.remove(this.oppDiscard, card_id);
        }

        public void removeAllFromOppDiscard(long cards) {
            this.oppDiscard = MyGinRummyUtil.removeAll(this.oppDiscard, cards);
        }

        public void addToOppForwent(int card_id) {
            this.oppForwent = MyGinRummyUtil.add(this.oppForwent, card_id);
        }

        public void addAllToOppForwent(long cards) {
            this.oppForwent = MyGinRummyUtil.addAll(this.oppForwent, cards);
        }

        public void removeFromOppForwent(int card_id) {
            this.oppForwent = MyGinRummyUtil.remove(this.oppForwent, card_id);
        }

        public void removeAllFromOppForwent(long cards) {
            this.oppForwent = MyGinRummyUtil.removeAll(this.oppForwent, cards);
        }
        // </editor-fold>

        /**
         * Increment the turn
         */
        public void nextTurn() {
            turn++;
        }

        /**
         * Decrement the number of cards remaining
         */
        public void decreaseNumRemaining() {
            num_remaining--;
        }

        /**
         * @param id The id of the card
         * @return All melds which the opponent could make with id
         */
        public ArrayList<Long> getPotentialOpponentMelds(int id) {

            // All cards which are/could be available to the opponent
            long available = getUnaccounted() + getOppHand();
            ArrayList<Long> melds = new ArrayList<>();

            // All available cards of the same rank as id
            long sameRank = MyGinRummyUtil.add(MyGinRummyUtil.getSameRank(available, id), id);
            int[] sameRankIds = MyGinRummyUtil.bitstringToIDArray(sameRank);

            if(MyGinRummyUtil.size(sameRank) >= 3) melds.add(sameRank);

            // Add all potential same-rank melds to the list
            for (int i : sameRankIds) {
                for (int j : sameRankIds) {
                    if (i != j) {
                        long meld = MyGinRummyUtil.idsToBitstring(new int[] { i, j, id });
                        ArrayList<Card> md = GinRummyUtil.bitstringToCards(meld);
                        if (!melds.contains(meld))
                            melds.add(meld);
                    }
                }
            }


            ArrayDeque<Integer> toCheck = new ArrayDeque<>();
            HashSet<Integer> checked = new HashSet<>();
            toCheck.add(id);
            ArrayList<Integer> run = new ArrayList<>();

            while(!toCheck.isEmpty()) {
                //Dequeue a card, and add it to the run
                int cardId = toCheck.removeFirst();
                checked.add(cardId);
                run.add(cardId);

                //Get all available adjacent cards to cardId of the same suit
                long sameSuit = MyGinRummyUtil.getSameSuit(available, cardId, 1);
                ArrayList<Card> ss = MyGinRummyUtil.bitstringToCards(sameSuit);
                int[] sameSuitIds = MyGinRummyUtil.bitstringToIDArray(sameSuit);

                //Enqueue them
                for(int i : sameSuitIds) {
                    if(!toCheck.contains(i) && !checked.contains(i)) toCheck.add(i);
                }

				/*
            // Add all potential same-suit melds to the list
            if (sameSuitIds.length == 2)
                melds.add(MyGinRummyUtil.add(MyGinRummyUtil.idsToBitstring(sameSuitIds), id));

            for (int i : sameSuitIds) {
                long adj = MyGinRummyUtil.getSameSuit(available, i, 1);
                int[] adjIds = MyGinRummyUtil.bitstringToIDArray(adj);
                if (adjIds.length == 2)
                    melds.add(MyGinRummyUtil.add(MyGinRummyUtil.idsToBitstring(sameSuitIds), i));
            }

				 */
            }

            if(run.size() >= 3) melds.add(MyGinRummyUtil.idsToBitstring(run));

            ArrayList<ArrayList<Card>> mel = new ArrayList<>();
            for(long ec : melds)
                mel.add(MyGinRummyUtil.bitstringToCards(ec));

            return melds;
        }

        public static ArrayList<Long> getPotentialOpponentMelds(int id, long unaccounted, long oppHand) {

            // All cards which are/could be available to the opponent
            long available = unaccounted + oppHand;
            ArrayList<Long> melds = new ArrayList<>();

            // All available cards of the same rank as id
            long sameRank = MyGinRummyUtil.add(MyGinRummyUtil.getSameRank(available, id), id);
            int[] sameRankIds = MyGinRummyUtil.bitstringToIDArray(sameRank);

            if(MyGinRummyUtil.size(sameRank) >= 3) melds.add(sameRank);

            // Add all potential same-rank melds to the list
            for (int i : sameRankIds) {
                for (int j : sameRankIds) {
                    if (i != j) {
                        long meld = MyGinRummyUtil.idsToBitstring(new int[] { i, j, id });
                        ArrayList<Card> md = GinRummyUtil.bitstringToCards(meld);
                        if (!melds.contains(meld))
                            melds.add(meld);
                    }
                }
            }


            ArrayDeque<Integer> toCheck = new ArrayDeque<>();
            HashSet<Integer> checked = new HashSet<>();
            toCheck.add(id);
            ArrayList<Integer> run = new ArrayList<>();

            while(!toCheck.isEmpty()) {
                //Dequeue a card, and add it to the run
                int cardId = toCheck.removeFirst();
                checked.add(cardId);
                run.add(cardId);

                //Get all available adjacent cards to cardId of the same suit
                long sameSuit = MyGinRummyUtil.getSameSuit(available, cardId, 1);
                ArrayList<Card> ss = MyGinRummyUtil.bitstringToCards(sameSuit);
                int[] sameSuitIds = MyGinRummyUtil.bitstringToIDArray(sameSuit);

                //Enqueue them
                for(int i : sameSuitIds) {
                    if(!toCheck.contains(i) && !checked.contains(i)) toCheck.add(i);
                }

				/*
            // Add all potential same-suit melds to the list
            if (sameSuitIds.length == 2)
                melds.add(MyGinRummyUtil.add(MyGinRummyUtil.idsToBitstring(sameSuitIds), id));

            for (int i : sameSuitIds) {
                long adj = MyGinRummyUtil.getSameSuit(available, i, 1);
                int[] adjIds = MyGinRummyUtil.bitstringToIDArray(adj);
                if (adjIds.length == 2)
                    melds.add(MyGinRummyUtil.add(MyGinRummyUtil.idsToBitstring(sameSuitIds), i));
            }

				 */
            }

            if(run.size() >= 3) melds.add(MyGinRummyUtil.idsToBitstring(run));

            ArrayList<ArrayList<Card>> mel = new ArrayList<>();
            for(long ec : melds)
                mel.add(MyGinRummyUtil.bitstringToCards(ec));

            return melds;
        }

        public ArrayList<Long> getPossibleMelds(int id, long hand) {
            // All cards which are/could be available to the opponent
            long available = getUnaccounted() + hand;
            ArrayList<Long> melds = new ArrayList<>();

            // All available cards of the same rank as id
            long sameRank = MyGinRummyUtil.add(MyGinRummyUtil.getSameRank(available, id), id);
            int[] sameRankIds = MyGinRummyUtil.bitstringToIDArray(sameRank);

            if(MyGinRummyUtil.size(sameRank) >= 3) melds.add(sameRank);

            // Add all potential same-rank melds to the list
            for (int i : sameRankIds) {
                for (int j : sameRankIds) {
                    if (i != j) {
                        long meld = MyGinRummyUtil.idsToBitstring(new int[] { i, j, id });
                        ArrayList<Card> md = GinRummyUtil.bitstringToCards(meld);
                        if (!melds.contains(meld))
                            melds.add(meld);
                    }
                }
            }


            ArrayDeque<Integer> toCheck = new ArrayDeque<>();
            HashSet<Integer> checked = new HashSet<>();
            toCheck.add(id);
            ArrayList<Integer> run = new ArrayList<>();

            while(!toCheck.isEmpty()) {
                //Dequeue a card, and add it to the run
                int cardId = toCheck.removeFirst();
                checked.add(cardId);
                run.add(cardId);

                //Get all available adjacent cards to cardId of the same suit
                long sameSuit = MyGinRummyUtil.getSameSuit(available, cardId, 1);
                ArrayList<Card> ss = MyGinRummyUtil.bitstringToCards(sameSuit);
                int[] sameSuitIds = MyGinRummyUtil.bitstringToIDArray(sameSuit);

                //Enqueue them
                for(int i : sameSuitIds) {
                    if(!toCheck.contains(i) && !checked.contains(i)) toCheck.add(i);
                }

				/*
            // Add all potential same-suit melds to the list
            if (sameSuitIds.length == 2)
                melds.add(MyGinRummyUtil.add(MyGinRummyUtil.idsToBitstring(sameSuitIds), id));

            for (int i : sameSuitIds) {
                long adj = MyGinRummyUtil.getSameSuit(available, i, 1);
                int[] adjIds = MyGinRummyUtil.bitstringToIDArray(adj);
                if (adjIds.length == 2)
                    melds.add(MyGinRummyUtil.add(MyGinRummyUtil.idsToBitstring(sameSuitIds), i));
            }

				 */
            }

            if(run.size() >= 3) melds.add(MyGinRummyUtil.idsToBitstring(run));

            ArrayList<ArrayList<Card>> mel = new ArrayList<>();
            for(long ec : melds)
                mel.add(MyGinRummyUtil.bitstringToCards(ec));

            return melds;
        }

        /**
         * @param id The id of the card
         * @return How many ways the opponent could use a card, ignoring melds of 4+
         */
        public int getUsefulnessToOpponent(int id) {
            return getPotentialOpponentMelds(id).size();
        }

        /**
         * @param id Card to check
         * @return The number of melds we could make with this card
         */
        public int getNumberOfPossibleMelds(int id) {

            // All cards which are/could be available to the opponent
            long available = getUnaccounted() + getHand();
            ArrayList<Long> melds = new ArrayList<>();

            // All available cards of the same rank as id
            long sameRank = MyGinRummyUtil.getSameRank(available, id);
            int[] sameRankIds = MyGinRummyUtil.bitstringToIDArray(sameRank);

            // Add all potential same-rank melds to the list
            for (int i : sameRankIds) {
                for (int j : sameRankIds) {
                    if (i != j) {
                        long meld = MyGinRummyUtil.idsToBitstring(new int[] { i, j, id });
                        if (!melds.contains(meld))
                            melds.add(meld);
                    }
                }
            }

            // All available adjacent cards to id of the same suit
            long sameSuit = MyGinRummyUtil.getSameSuit(available, id, 1);
            int[] sameSuitIds = MyGinRummyUtil.bitstringToIDArray(sameSuit);

            // Add all potential same-suit melds to the list
            if (sameSuitIds.length == 2)
                melds.add(MyGinRummyUtil.add(MyGinRummyUtil.idsToBitstring(sameSuitIds), id));

            for (int i : sameSuitIds) {
                long adj = MyGinRummyUtil.getSameSuit(available, i, 1);
                int[] adjIds = MyGinRummyUtil.bitstringToIDArray(adj);
                if (adjIds.length == 2)
                    melds.add(MyGinRummyUtil.add(MyGinRummyUtil.idsToBitstring(sameSuitIds), i));
            }

            return melds.size();
        }

        /**
         * @return A bitstring of all cards which are under the face-up card. We know
         *         for a fact that neither us nor the opponent can use any of these
         *         cards
         */
        public long getBuried() {
            long seen = this.seen;
            seen = MyGinRummyUtil.removeAll(seen, hand);
            seen = MyGinRummyUtil.removeAll(seen, oppHand);
            seen = MyGinRummyUtil.removeAll(seen, faceUp);

            return seen;
        }

        /**
         * @return A list of all cards which have not yet been seen. They are either
         *         still in the deck, or in the opponent's hand.
         */
        public long getUnaccounted() {
            long unaccounted = MyGinRummyUtil.cardsToBitstring(new ArrayList<>(Arrays.asList(Card.allCards)));
            unaccounted = MyGinRummyUtil.removeAll(unaccounted, seen);
            return unaccounted;
        }

        public double probabilityThatCardIsNotUseful(Card card) {
            int rankCount = 0;
            for (int suit = 0; suit < Card.NUM_SUITS; suit++) {
                if (suit != card.getSuit()) {
                    Card other = Card.getCard(card.getRank(), suit);
                    if (MyGinRummyUtil.contains(getUnseen(), other.getId()) || MyGinRummyUtil.contains(getOppHand(), other.getId())) {
                        rankCount++;
                    }
                }
            }
            if (rankCount >= 3) return 1.0;

            int upperGap = 0;
            for (int rank = card.getRank() + 1; rank < card.getRank() + 3 && rank < Card.NUM_RANKS; rank++) {
                Card other = Card.getCard(rank, card.getSuit());
                if (MyGinRummyUtil.contains(getUnseen(), other.getId()) || MyGinRummyUtil.contains(getOppHand(), other.getId())) {
                    upperGap++;
                }
            }
            int lowerGap = 0;
            for (int rank = card.getRank() - 1; rank > card.getRank() - 3 && rank >= 0; rank--) {
                Card other = Card.getCard(rank, card.getSuit());
                if (MyGinRummyUtil.contains(getUnseen(), other.getId()) || MyGinRummyUtil.contains(getOppHand(), other.getId())) {
                    lowerGap++;
                }
            }
            return upperGap + lowerGap >= 2?1.0:0.0;
        }

        // <editor-fold desc="Getters and Setters">
        public int getTurn() {
            return turn;
        }

        public long getHand() {
            return hand;
        }

        public void setHand(long hand) {
            this.hand = hand;
        }

        public void setHand(ArrayList<Card> hand) {
            this.hand = MyGinRummyUtil.cardsToBitstring(hand);
        }

        public long getSeen() {
            return seen;
        }

        public long getUnseen() {
            return ~seen;
        }

        public long getOppHand() {
            return oppHand;
        }

        public void setOppHand(long oppHand) {
            this.oppHand = oppHand;
        }

        public void setOppHand(ArrayList<Card> oppHand) {
            this.oppHand = MyGinRummyUtil.cardsToBitstring(oppHand);
        }

        public long getOppDiscard() {
            return oppDiscard;
        }

        public void setOppDiscard(long oppDiscard) {
            this.oppDiscard = oppDiscard;
        }

        public void setOppDiscard(ArrayList<Card> oppDiscard) {
            this.oppDiscard = MyGinRummyUtil.cardsToBitstring(oppDiscard);
        }

        public long getOppForwent() {
            return oppForwent;
        }

        public void setOppForwent(long oppForwent) {
            this.oppForwent = oppForwent;
        }

        public void setOppForwent(ArrayList<Card> oppForwent) {
            this.oppForwent = MyGinRummyUtil.cardsToBitstring(oppForwent);
        }

        public int getFaceUp() {
            return faceUp;
        }

        public void setFaceUp(int faceUp) {
            this.faceUpPrevious = this.faceUp;
            this.faceUp = faceUp;
        }

        public void setFaceUp(Card c) {
            this.faceUpPrevious = this.faceUp;
            this.faceUp = c.getId();
        }

        public int getFaceUpPrevious() {
            return faceUpPrevious;
        }

        public void setFaceUpPrevious(int faceUpPrevious) {
            this.faceUpPrevious = faceUpPrevious;
        }

        public void setFaceUpPrevious(Card faceUpPrevious) {
            this.faceUpPrevious = faceUpPrevious.getId();
        }

        public int getNum_remaining() {
            return num_remaining;
        }

        public int getTopCard() {
            return topCard;
        }

        public void setTopCard(int topCard) {
            this.topCard = topCard;
        }

        public void increaseTopCard() {
            topCard++;
        }
        // </editor-fold>

    }

    /*
     * Class containing helper methods
     */
    static class MyGinRummyUtil extends GinRummyUtil {

        public static ArrayList<ArrayList<Card>> getBestBestMeldSet(State state) {

            ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets;

            bestMeldSets = MyGinRummyUtil.cardsToBestMeldSets(MyGinRummyUtil.bitstringToCards(state.getHand()));

            //Select the meld configuration to submit.
            ArrayList<ArrayList<Card>> bestMeldSet = null;
            double minExpectedLayoff = Double.MAX_VALUE;
            for(ArrayList<ArrayList<Card>> meldSet : bestMeldSets) {
                ArrayList<Card> layoff = new ArrayList<>();

                // Add all cards to layoff who could be inserted into our hand
                for (ArrayList<Card> meld : meldSet) {
                    // Meld of cards of same rank
                    if (meld.get(0).getRank() == meld.get(1).getRank()) {
                        layoff.addAll(
                                MyGinRummyUtil.getSameRank(MyGinRummyUtil.bitstringToCards(
                                        MyGinRummyUtil.addAll(state.getOppHand(), state.getUnaccounted())), meld.get(0)));
                    }

                    // Cards of same suit
                    else {
                        layoff.addAll(MyGinRummyUtil.getSameSuit(MyGinRummyUtil.bitstringToCards(
                                MyGinRummyUtil.addAll(state.getOppHand(), state.getUnaccounted())),
                                meld.get(0), 1));
                        layoff.addAll(MyGinRummyUtil.getSameSuit(MyGinRummyUtil.bitstringToCards(
                                MyGinRummyUtil.addAll(state.getOppHand(), state.getUnaccounted())),
                                meld.get(meld.size() - 1), 1));
                    }
                }

                /*
                 * The sum of the deadwood of each layoff card * the probability that the opponent has said card
                 * is expectedLayoff. If expectedLayoff < minExpectedLayoff, it is the new minimum, so assign
                 * bestMeldSet to the current meld set. In the end, return the meld set with the lowest expectedLayoff.
                 */
                double expectedLayoff = 0d;
                for(Card card : layoff) {
                    //If the card is in an opponent meld, we don't expect them to try to lay it off.
                    if(MyGinRummyUtil.canOpponentMeld(card, state)) continue;
                    expectedLayoff += GinRummyUtil.getDeadwoodPoints(card) *
                            MyGinRummyUtil.getProbabilityThatOpponentHasUnseenCard(card, state);
                }

                if(expectedLayoff < minExpectedLayoff) {
                    minExpectedLayoff = expectedLayoff;
                    bestMeldSet = meldSet;
                }

            }

            return bestMeldSet;
        }

        /**
         * @param cards   a hand of cards
         * @param exclude cards to exclude from the check
         * @return all cards not in melds
         */
        public static ArrayList<Card> getUnmelded(ArrayList<Card> cards, ArrayList<Card> exclude) {

            ArrayList<Card> temp = new ArrayList<>(cards);
            if (exclude != null)
                temp.removeAll(exclude);

            ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets = cardsToBestMeldSets(temp);
            if (bestMeldSets.size() == 0)
                return temp;

            ArrayList<ArrayList<Card>> bestMeldSet = bestMeldSets.get(0);

            ArrayList<Card> unmelded = new ArrayList<>(temp);

            unmelded.removeIf(card -> {
                for (ArrayList<Card> meld : bestMeldSet)
                    if (meld.contains(card))
                        return true;
                return false;
            });

            return unmelded;

        }

        /**
         * @param cards   a hand of cards
         * @param exclude cards to exclude from the check
         * @return all cards not in melds
         */
        public static long getUnmelded(long cards, long exclude) {
            return cardsToBitstring(getUnmelded(bitstringToCards(cards), bitstringToCards(exclude)));
        }

        /**
         * @param hand    A hand of cards
         * @param card_id the id of a card
         * @return The hand with the card added
         */
        public static long add(long hand, int card_id) {
            return hand | 1L << card_id;
        }

        /**
         * @param hand  A hand of cards
         * @param toAdd The cards to add
         * @return The hand with the cards added
         */
        public static long addAll(long hand, long toAdd) {
            return hand | toAdd;
        }

        /**
         * @param hand    A hand of cards
         * @param card_id the id of a card
         * @return The hand with the card removed. Nothing is changed if hand doesn't
         *         contain card.
         */
        public static long remove(long hand, int card_id) {
            return hand & (hand ^ 1L << card_id);
        }

        /**
         * @param hand     A hand of cards
         * @param toRemove The set of cards to remove from hand
         * @return The hand with the cards removed. Nothing is changed if hand doesn't
         *         contain card.
         */
        public static long removeAll(long hand, long toRemove) {
            return hand & (hand ^ toRemove);
        }

        /**
         * @param hand    a hand of cards
         * @param card_id the reference card
         * @return true if hand contains card_id
         */
        public static boolean contains(long hand, int card_id) {
            return (hand & 1L << card_id) != 0;
        }

        /**
         *
         * @param hand
         * @param cardBitString
         * @return true if hand contains card
         */
        public static boolean contains(long hand, long cardBitString) {
            return (hand & cardBitString) != 0;
        }

        /**
         * @param cards   a hand of cards
         * @param exclude cards to exclude from the check
         * @return all cards who are in one of the melds in the best meld set for cards
         */
        public static ArrayList<Card> getMelded(ArrayList<Card> cards, ArrayList<Card> exclude) {
            ArrayList<Card> melded = new ArrayList<>(cards);
            melded.removeAll(getUnmelded(melded, exclude));
            return melded;
        }

        /**
         * @param cards   a hand of cards
         * @param exclude cards to exclude from the check
         * @return all cards who are in one of the melds in the best meld set for cards
         */
        public static long getMelded(long cards, long exclude) {
            cards = removeAll(cards, exclude);
            return cards & (cards ^ getUnmelded(cards, exclude));
        }

        /**
         * @param cards   a hand of cards
         * @param exclude cards to exclude from the check
         * @param state   the current state of the game
         * @return all cards in hand that cannot be made into any melds even after
         *         drawing one card.
         */
        public static ArrayList<Card> getSingles(ArrayList<Card> cards, ArrayList<Card> exclude, State state) {

            ArrayList<Card> temp = new ArrayList<>(cards);
            if (exclude != null)
                temp.removeAll(exclude);
            if (temp.isEmpty())
                return temp;

            ArrayList<Card> singles = getUnmelded(temp, exclude);
            ArrayList<Card> toRemove = new ArrayList<>();

            for (Card card : singles) {

                // If there exists another card of the same rank in the hand and unseen, it can
                // be melded within 1 draw
                if (containsRank(temp, card) && containsRank(state.getUnaccounted(), card.getId())) {
                    toRemove.add(card);
                    continue;
                }

                /*
                 * For each adjacent card of the same suit to c, if there is an adjacent card of
                 * the same suit to that card which is unseen, it can be melded within 1 draw
                 */

                for (Card c : getSameSuit(temp, card, 1)) {
                    if (containsSuit(state.getUnaccounted(), card.getId(), 1)) {
                        toRemove.add(card);
                        break;
                    }
                }
            }

            singles.removeAll(toRemove);
            return singles;

        }

        public static ArrayList<Card> getSingles(ArrayList<Card> cards, ArrayList<Card> exclude, ArrayList<Card> unaccounted) {

            ArrayList<Card> temp = new ArrayList<>(cards);
            if (exclude != null)
                temp.removeAll(exclude);
            if (temp.isEmpty())
                return temp;

            ArrayList<Card> singles = getUnmelded(temp, exclude);
            ArrayList<Card> toRemove = new ArrayList<>();

            for (Card card : singles) {

                // If there exists another card of the same rank in the hand and unseen, it can
                // be melded within 1 draw
                if (containsRank(temp, card) && containsRank(cardsToBitstring(unaccounted), card.getId())) {
                    toRemove.add(card);
                    continue;
                }

                /*
                 * For each adjacent card of the same suit to c, if there is an adjacent card of
                 * the same suit to that card which is unseen, it can be melded within 1 draw
                 */

                for (Card c : getSameSuit(temp, card, 1)) {
                    if (containsSuit(cardsToBitstring(unaccounted), card.getId(), 1)) {
                        toRemove.add(card);
                        break;
                    }
                }
            }

            singles.removeAll(toRemove);
            return singles;

        }

        /**
         * @param cards   a hand of cards
         * @param state   the current state of the game
         * @param exclude cards to exclude from the check
         * @return all cards in hand that cannot be made into any melds even after
         *         drawing one card.
         */
        public static long getSingles(long cards, long exclude, State state) {
            return cardsToBitstring(getSingles(bitstringToCards(cards), bitstringToCards(exclude), state));
        }

        public static long getSingles(long cards, long exclude, long unaccounted) {
            return cardsToBitstring(getSingles(bitstringToCards(cards), bitstringToCards(exclude), bitstringToCards(unaccounted)));
        }

        /**
         * @param cards   a hand of cards
         * @param exclude cards to exclude from the check
         * @param state   the current state of the game
         * @return all cards in hand that cannot be made into any melds even after
         *         drawing two cards.
         */
        public static ArrayList<Card> getIsolatedSingles(ArrayList<Card> cards, ArrayList<Card> exclude, State state) {
            ArrayList<Card> singles = getSingles(cards, exclude, state); // All cards which cannot be made into a meld after
            // drawing one card
            ArrayList<Card> unaccounted = bitstringToCards(state.getUnaccounted()); // All cards which have not yet been
            // seen
            //unaccounted.removeAll(bitstringToCards(state.getSeen()));

            ArrayList<Card> toRemove = new ArrayList<>();

            for (Card card : singles) {

                // Get all cards of the same rank as the card
                ArrayList<Card> adjacent = new ArrayList<>(getSameRank(unaccounted, card));

                // If at least 2 unseen cards of the same rank as card, it can be melded after
                // drawing 2 cards
                if (adjacent.size() > 1) {
                    toRemove.add(card);
                    break;
                }

                // All cards of the same suit as the card whose rank is within 1 (should only be
                // 2 cards max)
                adjacent = new ArrayList<>(getSameSuit(unaccounted, card, 1));

                // If no adjacent cards, then it cannot be melded even after drawing 2 cards.
                // Check next card.
                if (adjacent.isEmpty())
                    continue;

                // For each adjacent card, see if the next card also exists. If any do, then the
                // card can be melded after drawing 2 cards.
                for (Card c : adjacent) {
                    ArrayList<Card> c_adjacent = new ArrayList<>(getSameSuit(unaccounted, c, 1)); // Unaccounted cards
                    // adjacent to c. Should
                    // never contain card, so
                    // should contain 1 card
                    // max.
                    if (!c_adjacent.isEmpty()) {
                        toRemove.add(card);
                        break;
                    }

                }

            }

            singles.removeAll(toRemove);

            return singles;

        }

        public static ArrayList<Card> getIsolatedSingles(ArrayList<Card> cards, ArrayList<Card> exclude, ArrayList<Card> unaccounted) {
            ArrayList<Card> singles = getSingles(cards, exclude, unaccounted); // All cards which cannot be made into a meld after
            // drawing one card
            // seen
            //unaccounted.removeAll(bitstringToCards(state.getSeen()));

            ArrayList<Card> toRemove = new ArrayList<>();

            for (Card card : singles) {

                // Get all cards of the same rank as the card
                ArrayList<Card> adjacent = new ArrayList<>(getSameRank(unaccounted, card));

                // If at least 2 unseen cards of the same rank as card, it can be melded after
                // drawing 2 cards
                if (adjacent.size() > 1) {
                    toRemove.add(card);
                    break;
                }

                // All cards of the same suit as the card whose rank is within 1 (should only be
                // 2 cards max)
                adjacent = new ArrayList<>(getSameSuit(unaccounted, card, 1));

                // If no adjacent cards, then it cannot be melded even after drawing 2 cards.
                // Check next card.
                if (adjacent.isEmpty())
                    continue;

                // For each adjacent card, see if the next card also exists. If any do, then the
                // card can be melded after drawing 2 cards.
                for (Card c : adjacent) {
                    ArrayList<Card> c_adjacent = new ArrayList<>(getSameSuit(unaccounted, c, 1)); // Unaccounted cards
                    // adjacent to c. Should
                    // never contain card, so
                    // should contain 1 card
                    // max.
                    if (!c_adjacent.isEmpty()) {
                        toRemove.add(card);
                        break;
                    }

                }

            }

            singles.removeAll(toRemove);

            return singles;

        }

        /**
         * @param cards   a hand of cards
         * @param exclude cards to exclude from the check
         * @param state   the current state of the game
         * @return all cards in hand that cannot be made into any melds even after
         *         drawing two cards.
         */
        public static long getIsolatedSingles(long cards, long exclude, State state) {
            return cardsToBitstring(getIsolatedSingles(bitstringToCards(cards), bitstringToCards(exclude), state));
        }

        public static long getIsolatedSingles(long cards, long exclude, long unaccounted) {
            return cardsToBitstring(getIsolatedSingles(bitstringToCards(cards), bitstringToCards(exclude), bitstringToCards(unaccounted)));
        }

        /**
         * @param cards a hand of cards
         * @param card  the reference card
         * @return A list of all duples containing card
         */
        public static ArrayList<Set<Card>> getDuples(ArrayList<Card> cards, Card card) {

            ArrayList<Set<Card>> duples = new ArrayList<>();
            ArrayList<Card> sameRank = getSameRank(cards, card);
            ArrayList<Card> sameSuit = getSameSuit(cards, card, 2);

            for (Card c : sameRank)
                duples.add(new HashSet<>(Arrays.asList(card, c)));
            for (Card c : sameSuit)
                duples.add(new HashSet<>(Arrays.asList(card, c)));

            return duples;
        }

        /**
         * @param cards a hand of cards
         * @param card  the reference card
         * @return A list of all cards in duples with the reference card
         */
        public static long getDuples(long cards, int card) {

            long duples = cards;
            long sameRank = getSameRank(cards, card);
            long sameSuit = getSameSuit(cards, card, 2);

            duples = addAll(duples, addAll(sameRank, sameSuit));
            return duples;
        }

        /**
         * @param hand A hand of cards
         * @return The number of cards in the hand
         */
        public static int getHandSize(long hand) {
            int count = 0;
            for (int i = 0; i < Card.NUM_CARDS; i++) {
                if (hand % 2 == 1)
                    count++;
                hand /= 2;
            }

            return count;
        }

        /**
         * @param hand A hand of cards
         * @return A list of all the card ids in the hand
         */
        public static ArrayList<Integer> bitstringToIDs(long hand) {
            ArrayList<Integer> cards = new ArrayList<>();
            for (int i = 0; i < Card.NUM_CARDS; i++) {
                if (hand % 2 == 1)
                    cards.add(Card.allCards[i].getId());
                hand /= 2;
            }
            return cards;
        }

        /**
         * @param hand A hand of cards
         * @return An array of all the card ids in the hand
         */
        public static int[] bitstringToIDArray(long hand) {
            int[] ids = new int[getHandSize(hand)];
            int index = 0;
            for (int i = 0; i < Card.NUM_CARDS; i++) {
                if (hand % 2 == 1) {
                    ids[index] = Card.allCards[i].getId();
                    index++;
                }
                hand /= 2;
            }

            return ids;
        }

        /**
         * @param ids A list of ids in a hand
         * @return The list of ids as a long
         */
        public static long idsToBitstring(ArrayList<Integer> ids) {
            long bitstring = 0L;
            for (int i : ids)
                bitstring = add(bitstring, i);
            return bitstring;
        }

        /**
         * @param ids An array of ids in a hand
         * @return The list of ids as a long
         */
        public static long idsToBitstring(int[] ids) {
            long bitstring = 0L;
            for (int i : ids)
                bitstring = add(bitstring, i);
            return bitstring;
        }

        /**
         * @param c The reference card
         * @param s The current state of the game
         * @return true if the opponent can make a meld from c
         */
        public static boolean canOpponentMeld(Card c, State s) {

            // Cards of same rank as c
            ArrayList<Card> sameRank = getSameRank(new ArrayList<>(Arrays.asList(Card.allCards)), c);

            // Cards of same suit as c which are adjacent
            ArrayList<Card> sameSuitAdj = getSameSuit(new ArrayList<>(Arrays.asList(Card.allCards)), c, 1);

            // Cards of same suit as c who's rank is 2 away
            ArrayList<Card> sameSuit = getSameSuit(new ArrayList<>(Arrays.asList(Card.allCards)), c, 2);
            sameSuit.removeAll(sameSuitAdj);

            // Filter cards from collections so they only contain cards in the deck or in
            // the opponent's hand
            sameRank.removeIf(card -> !contains(s.getHand(), card.getId()) && !contains(s.getBuried(), card.getId()));
            sameSuitAdj.removeIf(card -> !contains(s.getHand(), card.getId()) && !contains(s.getBuried(), card.getId()));
            sameSuit.removeIf(card -> !contains(s.getHand(), card.getId()) && !contains(s.getBuried(), card.getId()));

            if (sameRank.size() >= 2)
                return true;

            else if (sameSuitAdj.isEmpty() || sameSuit.isEmpty())
                return false;

            // Looking at all the cards which are 2 away, if there is no card between it and
            // c, remove it
            sameSuit.removeIf(card -> {
                for (Card card1 : sameSuitAdj) {
                    if (card.getRank() > c.getRank())
                        return card.getRank() - 1 != card1.getRank();
                    else
                        return card.getRank() + 1 != card1.getRank();
                }
                return false;
            });

            return !sameSuit.isEmpty();
        }

        public static boolean canOpponentMeld(Card c, long oppHand, long buried) {

            // Cards of same rank as c
            ArrayList<Card> sameRank = getSameRank(new ArrayList<>(Arrays.asList(Card.allCards)), c);

            // Cards of same suit as c which are adjacent
            ArrayList<Card> sameSuitAdj = getSameSuit(new ArrayList<>(Arrays.asList(Card.allCards)), c, 1);

            // Cards of same suit as c who's rank is 2 away
            ArrayList<Card> sameSuit = getSameSuit(new ArrayList<>(Arrays.asList(Card.allCards)), c, 2);
            sameSuit.removeAll(sameSuitAdj);

            // Filter cards from collections so they only contain cards in the deck or in
            // the opponent's hand
            sameRank.removeIf(card -> !contains(oppHand, card.getId()) && !contains(buried, card.getId()));
            sameSuitAdj.removeIf(card -> !contains(oppHand, card.getId()) && !contains(buried, card.getId()));
            sameSuit.removeIf(card -> !contains(oppHand, card.getId()) && !contains(buried, card.getId()));

            if (sameRank.size() >= 2)
                return true;

            else if (sameSuitAdj.isEmpty() || sameSuit.isEmpty())
                return false;

            // Looking at all the cards which are 2 away, if there is no card between it and
            // c, remove it
            sameSuit.removeIf(card -> {
                for (Card card1 : sameSuitAdj) {
                    if (card.getRank() > c.getRank())
                        return card.getRank() - 1 != card1.getRank();
                    else
                        return card.getRank() + 1 != card1.getRank();
                }
                return false;
            });

            return !sameSuit.isEmpty();
        }

        /**
         * @param hand A hand of cards
         * @param c    The card we're checking
         * @return true if the added card makes a new meld
         */
        public static boolean makesNewMeld(ArrayList<Card> hand, Card c) {
            ArrayList<Card> newHand = new ArrayList<>(hand);
            newHand.add(c);

            ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets = MyGinRummyUtil.cardsToBestMeldSets(newHand);
            if (bestMeldSets.size() == 0)
                return false;

            for (ArrayList<Card> meld : bestMeldSets.get(0)) {
                if (meld.contains(c))
                    return true;
            }

            return false;
        }

        /**
         * @param hand A hand of cards
         * @param id   The card we're checking
         * @return true if the added card makes a new meld
         */
        public static boolean makesNewMeld(long hand, int id) {
            return makesNewMeld(MyGinRummyUtil.bitstringToCards(hand), Card.getCard(id));
        }

        /**
         * @param hand A hand of cards
         * @param c    The card we're considering
         * @return The change in deadwood from inserting c and discarding the worst
         *         card. If return value is negative, drawing c increases the overall
         *         deadwood of our hand.
         */
        public static int getImprovement(ArrayList<Card> hand, Card c) {
            int minDeadwood = Integer.MAX_VALUE;
            ArrayList<Card> newCards = new ArrayList<>(hand);
            newCards.add(c);

            // Find all cards whose removal would reduce the hand's deadwood by the max
            // amount
            for (Card card : newCards) {
                ArrayList<Card> remainingCards = new ArrayList<>(newCards);
                remainingCards.remove(card);

                ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets = cardsToBestMeldSets(remainingCards);

                int deadwood = bestMeldSets.isEmpty() ? getDeadwoodPoints(remainingCards)
                        : getDeadwoodPoints(bestMeldSets.get(0), remainingCards);
                if (deadwood < minDeadwood)
                    minDeadwood = deadwood;
            }

            return cardsToBestMeldSets(hand).isEmpty() ? getDeadwoodPoints(hand) - minDeadwood
                    : getDeadwoodPoints(cardsToBestMeldSets(hand).get(0), getUnmelded(hand, null)) - minDeadwood;
        }

        /**
         * @param hand A hand of cards
         * @param c_id The id of the card we're considering
         * @return The change in deadwood from inserting c and discarding the worst
         *         card. If return value is negative, drawing c increases the overall
         *         deadwood of our hand.
         */
        public static int getImprovement(long hand, int c_id) {
            return getImprovement(bitstringToCards(hand), Card.getCard(c_id));
        }

        /**
         * @param hand A hand of cards
         * @param c    The reference card
         * @return true if there exists at least one card of the same rank as c
         */
        public static boolean containsRank(ArrayList<Card> hand, Card c) {
            for (Card card : hand) {
                if (card.equals(c))
                    continue; // Don't count card c
                if (card.getRank() == c.getRank())
                    return true;
            }

            return false;
        }

        /**
         * @param hand A hand of cards
         * @param c    The reference card's id
         * @return true if there exists at least one card of the same rank as c
         */
        public static boolean containsRank(long hand, int c) {
            return containsRank(bitstringToCards(hand), Card.getCard(c));
        }

        /**
         * @param hand A hand of cards
         * @param c    The reference card
         * @return a list of all cards of the same rank as c
         */
        public static ArrayList<Card> getSameRank(ArrayList<Card> hand, Card c) {
            if (c == null)
                return new ArrayList<>();
            return (ArrayList<Card>) hand.stream().filter(card -> (card.getRank() == c.getRank() && !card.equals(c)))
                    .collect(Collectors.toList());
        }

        /**
         * @param hand A hand of cards
         * @param c    The reference card's id
         * @return a list of all cards of the same rank as c
         */
        public static long getSameRank(long hand, int c) {
            return cardsToBitstring(getSameRank(bitstringToCards(hand), Card.getCard(c)));
        }

        /**
         * @param hand A hand of cards
         * @param c    The reference card
         * @param diff the difference between the cards' ranks
         * @return true if there exists at least one card of the same suit as c, given
         *         that its rank is within diff of c's rank
         */
        public static boolean containsSuit(ArrayList<Card> hand, Card c, int diff) {
            for (Card card : hand) {
                if (card.equals(c))
                    continue; // Don't count card c
                if (card.getSuit() == c.getSuit() && Math.abs(c.getRank() - card.getRank()) <= diff)
                    return true;
            }

            return false;
        }

        /**
         * @param hand A hand of cards
         * @param c    The reference card's id
         * @param diff the difference between the cards' ranks
         * @return true if there exists at least one card of the same suit as c, given
         *         that its rank is within diff of c's rank
         */
        public static boolean containsSuit(long hand, int c, int diff) {
            return containsSuit(bitstringToCards(hand), Card.getCard(c), diff);
        }

        /**
         * @param hand A hand of cards
         * @param c    The reference card
         * @param diff the difference between the cards' ranks
         * @return a list of all cards of same suit as c, given that its rank is within
         *         diff of c's rank
         */
        public static ArrayList<Card> getSameSuit(ArrayList<Card> hand, Card c, int diff) {
            if (c == null)
                return new ArrayList<>();
            return (ArrayList<Card>) hand
                    .stream().filter(card -> (card.getSuit() == c.getSuit()
                            && Math.abs(c.getRank() - card.getRank()) <= diff && !card.equals(c)))
                    .collect(Collectors.toList());
        }

        /**
         * @param hand A hand of cards
         * @param c    The reference card's id
         * @param diff the difference between the cards' ranks
         * @return a list of all cards of same suit as c, given that its rank is within
         *         diff of c's rank
         */
        public static long getSameSuit(long hand, int c, int diff) {
            return cardsToBitstring(getSameSuit(bitstringToCards(hand), Card.getCard(c), diff));
        }

        /**
         * @param cards A hand of cards
         * @return the card with the highest deadwood
         */
        public static Card getHighestDeadwood(ArrayList<Card> cards) {
            if (cards.size() == 0)
                return null;
            return cards.stream().reduce(cards.get(0), (max, c) -> getDeadwoodPoints(c) > getDeadwoodPoints(max) ? c : max);
        }

        /**
         * @param cards A hand of cards
         * @return the id of the card with the highest deadwood
         */
        public static int getHighestDeadwood(long cards) {
            try {
                return getHighestDeadwood(bitstringToCards(cards)).getId();
            } catch (NullPointerException e) {
                return -1;
            }

        }

        /**
         * @param hand      A hand of cards
         * @param drawnCard The card drawn - null if a card wasn't just picked up
         * @param face_up   The card that was face-up before the draw
         * @param range     The range of deadwoods still recorded. Range of 0 only gives
         *                  those who would lower deadwood the most.
         * @return A list of all cards whose removal would lower the deadwood within
         *         range of the most
         */
        public static ArrayList<Card> findHighestDiscards(ArrayList<Card> hand, Card drawnCard, Card face_up, int range) {

            ArrayList<Card> candidateCards = new ArrayList<>(hand);
            HashMap<Integer, ArrayList<Card>> candidateLog = new HashMap<>();

            int minDeadwood = Integer.MAX_VALUE;

            // Find all cards whose removal would reduce the hand's deadwood by the max
            // amount
            for (Card card : hand) {
                // Cannot draw and discard face up card.
                if (drawnCard != null && (card == drawnCard && drawnCard == face_up))
                    continue;

                ArrayList<Card> remainingCards = new ArrayList<>(hand);
                remainingCards.remove(card);
                ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets = cardsToBestMeldSets(remainingCards);
                int deadwood = bestMeldSets.isEmpty() ? getDeadwoodPoints(remainingCards)
                        : getDeadwoodPoints(bestMeldSets.get(0), remainingCards);
                if (deadwood <= minDeadwood) {
                    if (deadwood < minDeadwood) {

                        candidateLog.put(minDeadwood, new ArrayList<>(candidateCards));

                        candidateCards.clear();
                        minDeadwood = deadwood;

                    }
                    candidateCards.add(card);
                }
            }

            for (HashMap.Entry<Integer, ArrayList<Card>> entry : candidateLog.entrySet())
                if (entry.getKey() - minDeadwood <= range)
                    candidateCards.addAll(entry.getValue());

            return candidateCards;
        }

        /**
         * @param hand      A hand of cards
         * @param drawnCard The card drawn's id - -1 if a card wasn't just picked up
         * @param face_up   The if of the card that was face-up before the draw
         * @param range     The range of deadwoods still recorded
         * @return A list of all cards whose removal would lower the deadwood within
         *         range of the most
         */
        public static long findHighestDiscards(long hand, int drawnCard, int face_up, int range) {
            return cardsToBitstring(findHighestDiscards(bitstringToCards(hand),
                    drawnCard == -1 ? null : Card.getCard(drawnCard), face_up == -1 ? null : Card.getCard(face_up), range));
        }

        /**
         * @param state The current state of the game
         * @return The expected deadwood for drawing one more card
         */
        public static double expectedDeadwoodForNextDraw(State state) {
            ArrayList<Card> unaccounted = bitstringToCards(state.getUnaccounted()); // Cards which have not been seen
            double sum = 0;

            for (Card card : unaccounted)
                sum += 1d / unaccounted.size() * getImprovement(bitstringToCards(state.getHand()), card);

            return sum;
        }

        /**
         * @param hand A hand of cards
         * @return The number of cards in the hand
         */
        public static int size(long hand) {
            String s = Long.toBinaryString(hand);
            int count = 0;
            for (int i = 0; i < s.length(); i++) {
                if (s.charAt(i) == '1')
                    count++;
            }
            return count;
        }

        /**
         * Print out a hand of cards, with melds separated from the rest
         *
         * @param hand A hand of cards
         */
        public static void printHandWithMelds(ArrayList<Card> hand) {
            ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets = GinRummyUtil.cardsToBestMeldSets(hand);
            ArrayList<ArrayList<Card>> bestMeldSet;
            ArrayList<Card> unmelded = MyGinRummyUtil.getUnmelded(hand, null);
            unmelded.sort((c1, c2) -> {
                String c1str;
                String c2str;
                char first;

                switch (c1.toString().charAt(0)) {
                    case '2': {
                        first = 'B';
                        break;
                    }
                    case '3': {
                        first = 'C';
                        break;
                    }
                    case '4': {
                        first = 'D';
                        break;
                    }
                    case '5': {
                        first = 'E';
                        break;
                    }
                    case '6': {
                        first = 'F';
                        break;
                    }
                    case '7': {
                        first = 'G';
                        break;
                    }
                    case '8': {
                        first = 'H';
                        break;
                    }
                    case '9': {
                        first = 'I';
                        break;
                    }
                    case 'T': {
                        first = 'J';
                        break;
                    }
                    case 'J': {
                        first = 'K';
                        break;
                    }
                    case 'Q': {
                        first = 'L';
                        break;
                    }
                    case 'K': {
                        first = 'M';
                        break;
                    }
                    default: {
                        first = 'A';
                    }

                }
                c1str = first + c1.toString().substring(1);

                switch (c2.toString().charAt(0)) {
                    case '2': {
                        first = 'B';
                        break;
                    }
                    case '3': {
                        first = 'C';
                        break;
                    }
                    case '4': {
                        first = 'D';
                        break;
                    }
                    case '5': {
                        first = 'E';
                        break;
                    }
                    case '6': {
                        first = 'F';
                        break;
                    }
                    case '7': {
                        first = 'G';
                        break;
                    }
                    case '8': {
                        first = 'H';
                        break;
                    }
                    case '9': {
                        first = 'I';
                        break;
                    }
                    case 'T': {
                        first = 'J';
                        break;
                    }
                    case 'J': {
                        first = 'K';
                        break;
                    }
                    case 'Q': {
                        first = 'L';
                        break;
                    }
                    case 'K': {
                        first = 'M';
                        break;
                    }
                    default: {
                        first = 'A';
                    }

                }
                c2str = first + c2.toString().substring(1);

                return c1str.compareTo(c2str);
            });
            unmelded.forEach(c -> System.out.print(c.toString() + " "));
            System.out.println();

            if (!bestMeldSets.isEmpty()) {
                bestMeldSet = bestMeldSets.get(0);

                for (ArrayList<Card> meld : bestMeldSet) {
                    meld.sort((c1, c2) -> {
                        String c1str;
                        String c2str;
                        char first;

                        switch (c1.toString().charAt(0)) {
                            case '2': {
                                first = 'B';
                                break;
                            }
                            case '3': {
                                first = 'C';
                                break;
                            }
                            case '4': {
                                first = 'D';
                                break;
                            }
                            case '5': {
                                first = 'E';
                                break;
                            }
                            case '6': {
                                first = 'F';
                                break;
                            }
                            case '7': {
                                first = 'G';
                                break;
                            }
                            case '8': {
                                first = 'H';
                                break;
                            }
                            case '9': {
                                first = 'I';
                                break;
                            }
                            case 'T': {
                                first = 'J';
                                break;
                            }
                            case 'J': {
                                first = 'K';
                                break;
                            }
                            case 'Q': {
                                first = 'L';
                                break;
                            }
                            case 'K': {
                                first = 'M';
                                break;
                            }
                            default: {
                                first = 'A';
                            }

                        }
                        c1str = first + c1.toString().substring(1);

                        switch (c2.toString().charAt(0)) {
                            case '2': {
                                first = 'B';
                                break;
                            }
                            case '3': {
                                first = 'C';
                                break;
                            }
                            case '4': {
                                first = 'D';
                                break;
                            }
                            case '5': {
                                first = 'E';
                                break;
                            }
                            case '6': {
                                first = 'F';
                                break;
                            }
                            case '7': {
                                first = 'G';
                                break;
                            }
                            case '8': {
                                first = 'H';
                                break;
                            }
                            case '9': {
                                first = 'I';
                                break;
                            }
                            case 'T': {
                                first = 'J';
                                break;
                            }
                            case 'J': {
                                first = 'K';
                                break;
                            }
                            case 'Q': {
                                first = 'L';
                                break;
                            }
                            case 'K': {
                                first = 'M';
                                break;
                            }
                            default: {
                                first = 'A';
                            }

                        }
                        c2str = first + c2.toString().substring(1);

                        return c1str.compareTo(c2str);
                    });
                    meld.forEach(c -> System.out.print(c.toString() + " "));
                    System.out.println();
                }

                System.out.println("Deadwood: " + MyGinRummyUtil.getDeadwoodPoints(bestMeldSet, hand));
            }

            else
                System.out.println("Deadwood: " + MyGinRummyUtil.getDeadwoodPoints(hand));
        }

        /**
         * Print out a hand of cards, with melds separated from the rest
         *
         * @param hand A hand of cards
         */
        public static void printHandWithMelds(long hand) {
            printHandWithMelds(bitstringToCards(hand));
        }

        /**
         * Print out a hand of cards
         *
         * @param hand A hand of cards
         */
        public static void printHand(ArrayList<Card> hand) {
            hand.sort((c1, c2) -> {
                String c1str;
                String c2str;
                char first;

                switch (c1.toString().charAt(0)) {
                    case '2': {
                        first = 'B';
                        break;
                    }
                    case '3': {
                        first = 'C';
                        break;
                    }
                    case '4': {
                        first = 'D';
                        break;
                    }
                    case '5': {
                        first = 'E';
                        break;
                    }
                    case '6': {
                        first = 'F';
                        break;
                    }
                    case '7': {
                        first = 'G';
                        break;
                    }
                    case '8': {
                        first = 'H';
                        break;
                    }
                    case '9': {
                        first = 'I';
                        break;
                    }
                    case 'T': {
                        first = 'J';
                        break;
                    }
                    case 'J': {
                        first = 'K';
                        break;
                    }
                    case 'Q': {
                        first = 'L';
                        break;
                    }
                    case 'K': {
                        first = 'M';
                        break;
                    }
                    default: {
                        first = 'A';
                    }

                }
                c1str = first + c1.toString().substring(1);

                switch (c2.toString().charAt(0)) {
                    case '2': {
                        first = 'B';
                        break;
                    }
                    case '3': {
                        first = 'C';
                        break;
                    }
                    case '4': {
                        first = 'D';
                        break;
                    }
                    case '5': {
                        first = 'E';
                        break;
                    }
                    case '6': {
                        first = 'F';
                        break;
                    }
                    case '7': {
                        first = 'G';
                        break;
                    }
                    case '8': {
                        first = 'H';
                        break;
                    }
                    case '9': {
                        first = 'I';
                        break;
                    }
                    case 'T': {
                        first = 'J';
                        break;
                    }
                    case 'J': {
                        first = 'K';
                        break;
                    }
                    case 'Q': {
                        first = 'L';
                        break;
                    }
                    case 'K': {
                        first = 'M';
                        break;
                    }
                    default: {
                        first = 'A';
                    }

                }
                c2str = first + c2.toString().substring(1);

                return c1str.compareTo(c2str);
            });

            hand.forEach(c -> System.out.print(c.toString() + " "));
            System.out.println();
        }

        /**
         * Print out a hand of cards
         *
         * @param hand A hand of cards
         */
        public static void printHand(long hand) {
            printHand(bitstringToCards(hand));
        }

        /**
         * @param strategy A strategy
         * @return The encoded strategy
         */
        static String encoded(int[] strategy) {
            String encoded = "";
            for (int i = 0; i < strategy.length; i++) {
                encoded += Integer.toHexString(strategy[i]);
            }

            return encoded;
        }

        /**
         * @param hex An encoded strategy
         * @return The decoded strategy
         */
        static int[] decoded(String hex) {
            int[] strategy = new int[hex.length() + 1];
            for (int i = 0; i < hex.length(); i++) {
                strategy[i] = (int) Long.parseLong(hex.substring(i, i + 1), 16);
            }

            return strategy;
        }

        /**
         * Gets the probability that the opponent has the card in question
         *
         * @param c card in question
         * @param s Game State
         * @return The probability (%) of the opponent having a card
         */
        static double getProbabilityThatOpponentHasUnseenCard(Card c, State s) {
            return getProbabilityThatOpponentHasUnseenCard(cardAsBitString(c), s);
        }

        /**
         * Gets the probability that the opponent has the card in question
         *
         * @param c Bitstring of the card in question
         * @param s Game State
         * @return The probability (%) of the opponent having a card
         */
        static double getProbabilityThatOpponentHasUnseenCard(long c, State s) {
            // if card is not in the game anymore, return 0
            if (contains(s.getBuried(), c))
                return 0d;
                // if opponent has the card passed, return 1.0;
            else if (contains(s.getOppHand(), c))
                return 1d;
                // if we know all cards on the opponent hand, and card is not in hand, then prob
                // = 0%
            else if (bitstringToCards(s.getOppHand()).size() == 10)
                return 0d;

            // at this point, we know the card in question is unseen

            // card in question
            Card card = bitstringToCards(c).get(0);

            // can the opponent make a meld out of this card?
            int opponentPossibleMelds = s.getPotentialOpponentMelds(card.getId()).size();

            int sizeOfUnseenOppHand = 10 - MyGinRummyUtil.size(s.getOppHand());
            int sizeOfUnseen = MyGinRummyUtil.size(s.getUnaccounted());

            double unweightedProbabilityInOppHand = sizeOfUnseenOppHand/(double)sizeOfUnseen;

            // if opponent can meld, then it means that there's a
            // chance that the opponent has this card
            if (opponentPossibleMelds > 0) {
                // nominator adding decimal of how many possible melds can the opponent make
                double nominator = 1 + (opponentPossibleMelds / 10d);
                return nominator / sizeOfUnseen;
            }


            // figure out a way to calculate possible melds with those cards
            // see if the meld cards are still in play (unseen , opponent hand)

            // 1/ unseen cards : chance if everything fails
            //return 1d / bitstringToCards(s.getUnseen()).size();

            //return (number of unseen cards in opponent's hand)/(number of unseen cards) if all else fails
            return unweightedProbabilityInOppHand;
        }

        static double getProbabilityThatOpponentHasUnseenCard(long c, long buried, long unaccounted, long oppHand) {
            // if card is not in the game anymore, return 0
            if (contains(buried, c))
                return 0d;
                // if opponent has the card passed, return 1.0;
            else if (contains(oppHand, c))
                return 1d;
                // if we know all cards on the opponent hand, and card is not in hand, then prob
                // = 0%
            else if (bitstringToCards(oppHand).size() == 10)
                return 0d;

            // at this point, we know the card in question is unseen

            // card in question
            Card card = bitstringToCards(c).get(0);

            // can the opponent make a meld out of this card?
            int opponentPossibleMelds = State.getPotentialOpponentMelds(card.getId(), unaccounted, oppHand).size();

            int sizeOfUnseenOppHand = 10 - MyGinRummyUtil.size(oppHand);
            int sizeOfUnseen = MyGinRummyUtil.size(unaccounted);

            double unweightedProbabilityInOppHand = sizeOfUnseenOppHand/(double)sizeOfUnseen;

            // if opponent can meld, then it means that there's a
            // chance that the opponent has this card
            if (opponentPossibleMelds > 0) {
                // nominator adding decimal of how many possible melds can the opponent make
                double nominator = 1 + (opponentPossibleMelds / 10d);
                return nominator / sizeOfUnseen;
            }


            // figure out a way to calculate possible melds with those cards
            // see if the meld cards are still in play (unseen , opponent hand)

            // 1/ unseen cards : chance if everything fails
            //return 1d / bitstringToCards(s.getUnseen()).size();

            //return (number of unseen cards in opponent's hand)/(number of unseen cards) if all else fails
            return unweightedProbabilityInOppHand;
        }

        /**
         * Return a bitstring representation of this card
         *
         * @param card the card
         * @return a bitstring with the 1 set in bit position equal the card's id
         */
        public static long cardAsBitString(Card card) {
            return 1L << card.getId();
        }
    }

    /**
     * Class to hold parameters for player strategy
     */
    static class GeneralStrategy {

        // <editor-fold desc="Instance Variables">
        /**
         * A map from the information set to the probability that we will knock
         */
        private HashMap<String, Double> knockStrat;

        /**
         * A map from the information set to the probability that we will draw
         */
        private HashMap<String, Double> drawStrat;

        /**
         * Max deadwood a card can contribute to a hand while not being able to be
         * melded within 2 turns, in order for us to avoid discarding it.
         */
        private int maxIsolatedSingleDeadwood;

        /**
         * After this turn has passed, we will no longer go out of our way to keep cards
         * "protected" by maxIsolatedSingleDeadwood.
         */
        private int minIsolatedSingleDiscardTurn;

        /**
         * Max deadwood a card can contribute to a hand while not being able to be
         * melded within 1 turn, in order for us to avoid discarding it.
         */
        private int maxSingleDeadwood;

        /**
         * After this turn has passed, we will no longer go out of our way to keep cards
         * "protected" by maxSingleDeadwood.
         */
        private int minSingleDiscardTurn;

        /**
         * If the probability of getting a gin within x turns is >=
         * minWaitForGinProbability, we should wait to try to get a gin. TODO: Figure
         * out if this is even useful, and if it is, implement a way to calculate the
         * probability of getting a gin within x turns. Maybe generalize to find the
         * probability that total deadwood will become <= some y in x turns.
         */
        private double minWaitForGinProbability;

        /**
         * If our total deadwood is below this value, we should wait and try to
         * undercut. TODO: Determine whether this would affect our strategy differently
         * than minWaitForGinProbability. They might mostly overlap, in which case I
         * only need to consider one of the 2.
         */
        private int minUndercutDeadwood;

        /**
         * Min turn to try to layoff cards
         */
        private int minLayoffTurn;

        /**
         * Minimum change in deadwood the face-up card can contribute in order for us to
         * consider drawing it.
         */
        private int minPickupDifference;

        private int canteloupe;
        // </editor-fold>

        /**
         * Constructor
         */

        GeneralStrategy(int[] strategy, HashMap<String, Double> knockStrat, HashMap<String, Double> drawStrat) {

            this.knockStrat = knockStrat;
            this.drawStrat = drawStrat;

            this.maxIsolatedSingleDeadwood = strategy[1] <= 10 && strategy[1] > 0 ? strategy[1] : 10;
            this.minIsolatedSingleDiscardTurn = Math.max(strategy[2], 0);

            this.maxSingleDeadwood = strategy[3] <= 10 && strategy[3] > 0 ? strategy[3] : 10;
            this.minSingleDiscardTurn = Math.max(strategy[4], 0);

            // this.minWaitForGinProbability = minWaitForGinProbability <= 1 &&
            // minWaitForGinProbability >= 0 ? minWaitForGinProbability : 0.0;

            // this.minUndercutDeadwood = minUndercutDeadwood <= 10 && minUndercutDeadwood
            // >= 0 ? minUndercutDeadwood : 10;

            // this.minLayoffTurn = Math.max(minLayoffTurn, 0);

            this.minPickupDifference = strategy[5] <= 10 && strategy[5] >= 0 ? strategy[5] : 0;
            this.canteloupe = Math.max(strategy[6], 0);

        }

        // <editor-fold desc="Getters and Setters">
        public HashMap<String, Double> getKnockStrat() {
            return knockStrat;
        }

        public double getKnockAt(String s) {
            return getAt(knockStrat, s);
        }

        public double getDrawAt(String s) {
            return getAt(drawStrat, s);
        }

        public double getAt(HashMap<String, Double> strat, String s) {
            try {
                return strat.get(s);
            } catch (Exception e) {

                //If the infoset doesn't exist, find the closest one

                double maxStringSimilarity = Double.MIN_VALUE;
                double minValueDifference = Double.MAX_VALUE;
                String similar = "";
                for(String str : strat.keySet()) {
                    boolean sLonger = s.length() >= str.length();

                    String[] longer = sLonger? s.split("_") : str.split("_");
                    String[] shorter = !sLonger? s.split("_") : str.split("_");

                    boolean[] intersect = new boolean[longer.length];
                    int union = longer.length + shorter.length;

                    for(int i = 0; i < longer.length; i++)
                        intersect[i] = i < shorter.length && longer[i].equals(shorter[i]);

                    double strOverlap = ((double)intersect.length)/union;

                    //If the string has an overlap at least that of the recorded max, check distance between numeric values
                    if(strOverlap >= maxStringSimilarity) {
                        double valOverlap = 0d;
                        for(int i = 0; i < intersect.length; i++) {
                            if(!intersect[i]) {
                                double v1, v2;
                                try {
                                    v1 = Double.parseDouble(longer[i]);
                                    v2 = i < shorter.length? Double.parseDouble(shorter[i]) : 0d;
                                } catch (NumberFormatException ex) {
                                    continue;
                                }

                                valOverlap += Math.pow(v1 - v2, 2);
                            }
                        }

                        if(Math.sqrt(valOverlap) < minValueDifference) {
                            maxStringSimilarity = strOverlap;
                            minValueDifference = valOverlap;
                            similar = str;
                        }

                    }

                }

                double h = -1d;
                if(strat.containsKey(similar))
                    h = strat.get(similar);

                return h;
            }
        }

        int getMaxIsolatedSingleDeadwood() {
            return maxIsolatedSingleDeadwood;
        }

        int getMinIsolatedSingleDiscardTurn() {
            return minIsolatedSingleDiscardTurn;
        }

        int getMaxSingleDeadwood() {
            return maxSingleDeadwood;
        }

        int getMinSingleDiscardTurn() {
            return minSingleDiscardTurn;
        }

        double getMinWaitForGinProbability() {
            return minWaitForGinProbability;
        }

        int getMinUndercutDeadwood() {
            return minUndercutDeadwood;
        }

        int getMinLayoffTurn() {
            return minLayoffTurn;
        }

        int getMinPickupDifference() {
            return minPickupDifference;
        }

        public void setMaxIsolatedSingleDeadwood(int maxIsolatedSingleDeadwood) {
            this.maxIsolatedSingleDeadwood = maxIsolatedSingleDeadwood;
        }

        public void setMinIsolatedSingleDiscardTurn(int minIsolatedSingleDiscardTurn) {
            this.minIsolatedSingleDiscardTurn = minIsolatedSingleDiscardTurn;
        }

        public void setMaxSingleDeadwood(int maxSingleDeadwood) {
            this.maxSingleDeadwood = maxSingleDeadwood;
        }

        public void setMinSingleDiscardTurn(int minSingleDiscardTurn) {
            this.minSingleDiscardTurn = minSingleDiscardTurn;
        }

        public void setMinWaitForGinProbability(double minWaitForGinProbability) {
            this.minWaitForGinProbability = minWaitForGinProbability;
        }

        public void setMinUndercutDeadwood(int minUndercutDeadwood) {
            this.minUndercutDeadwood = minUndercutDeadwood;
        }

        public void setMinLayoffTurn(int minLayoffTurn) {
            this.minLayoffTurn = minLayoffTurn;
        }

        public void setMinPickupDifference(int minPickupDifference) {
            this.minPickupDifference = minPickupDifference;
        }

        public int getCanteloupe() {
            return canteloupe;
        }

        public void setCanteloupe(int canteloupe) {
            this.canteloupe = canteloupe;
        }

        // </editor-fold>
    }


    /***************************************************************************************************
     *
     *                                      Discard Code
     *
     ****************************************************************************************************/

    static double[] opponentExpectedImprovement = new double[13 * 16_384];
    static int[] opponentCounts = new int[13 * 16_384];
    static {
        loadOpponentStats();
    }

    /**
     * A class to store information about the worth of a discard
     */
    public static class DiscardMetric {
        public DiscardMetric(Card discard, int immediateDeadwood, ArrayList<Card> hand) {
            this.discard = discard;
            this.immediateDeadwood = immediateDeadwood;
            alwaysMelded = true;
            this.hand = hand;
        }

        Card discard;           // The card to be discarded
        int immediateDeadwood; 	// The deadwood that would remain in the hand if the card were discarded
        ArrayList<Card> hand;   // The current hand without this discard
        boolean alwaysMelded;   // Whether this card is in every meld in the current hand
        double score; // The value of this discard (low numbers are better)
        ArrayList<Integer> deadwood = new ArrayList<>(); // deadwood after one turn if we discard this card

        // Stats about opponents hand
        boolean opponentStatsCalculated;
        int oppSameRank;       // number of cards in opponent's hand of same rank
        int mySameRank;        // number of cards of same rank that are in my hand
        int discardSameRank;   // number of cards of same rank that have been discarded
        int upSuited;          // whether the card of the same suit with the next higher rank
        // (0) has been discarded/does not exist, (1) is in opponent's hand, (2) is in my hand, or (3) is unseen
        int up2Suited;         // whether the card of the same suit with a rank two higher
        // (0) has been discarded/does not exist, (1) is in opponent's hand, (2) is in my hand, or (3) is unseen
        int downSuited;        // whether the card of the same suit with the next lower rank
        // (0) has been discarded/does not exist, (1) is in opponent's hand, (2) is in my hand, or (3) is unseen
        int down2Suited;       // whether the card of the same suit with a rank two lower
        // (0) has been discarded/does not exist, (1) is in opponent's hand, (2) is in my hand, or (3) is unseen

        private void calculateOpponentStats(State state) {
            opponentStatsCalculated = true;
            long hand = state.getHand();
            long opp = state.getOppHand();
            long burried = state.getBuried();
            for (int suit = 0; suit < 4; suit++) {
                long c = 1L << (discard.getRank() + suit * 13);
                if (( opp & c) != 0 ) oppSameRank++;
                if (( hand & c) != 0 ) mySameRank++;
                if (( burried & c) != 0 ) discardSameRank++;
            }
            if (discard.getRank() == 12) {
                upSuited = 0;
            }
            else {
                long c = 1L << (discard.getId() + 1);
                if ((burried & c) != 0 ) upSuited = 0;
                else if (( opp & c) != 0 ) upSuited = 1;
                else if (( hand & c) != 0 ) upSuited = 2;
                else upSuited = 3;
            }
            if (discard.getRank() >= 11) {
                up2Suited = 0;
            }
            else {
                long c = 1L << (discard.getId() + 2);
                if ((burried & c) != 0 ) up2Suited = 0;
                else if (( opp & c) != 0 ) up2Suited = 1;
                else if (( hand & c) != 0 ) up2Suited = 2;
                else upSuited = 3;
            }
            if (discard.getRank() == 0) {
                downSuited = 0;
            }
            else {
                long c = 1L << (discard.getId() - 1);
                if ((burried & c) != 0 ) downSuited = 0;
                else if (( opp & c) != 0 ) downSuited = 1;
                else if (( hand & c) != 0 ) downSuited = 2;
                else downSuited = 3;
            }
            if (discard.getRank() <= 1) {
                down2Suited = 0;
            }
            else {
                long c = 1L << (discard.getId() - 2);
                if ((burried & c) != 0 ) down2Suited = 0;
                else if (( opp & c) != 0 ) down2Suited = 1;
                else if (( hand & c) != 0 ) down2Suited = 2;
                else down2Suited = 3;
            }
        }

        /**
         * @return an index into the opponent EV improvment lookup table, based on card stats
         */
        int getIndex() {
            int index = 0;
            index += discard.getRank();
            index <<= 2;
            index += Math.min(oppSameRank,3);
            index <<= 2;
            index += Math.min(mySameRank,3);
            index <<= 2;
            index += Math.min(discardSameRank,3);
            index <<= 2;
            index += upSuited;
            index <<= 2;
            index += up2Suited;
            index <<= 2;
            index += downSuited;
            index <<= 2;
            index += down2Suited;
            return index;
        }

        double getExpectedOpponentImprovement(State state) {
            if (!opponentStatsCalculated) calculateOpponentStats(state);
            if (opponentCounts[getIndex()] >= 100)
                return opponentExpectedImprovement[getIndex()];
            else
                return 0.0;
        }
    }


    /**
     * Return a list of DiscardMetric's for cards that would make good discards
     * 	The list will contain only cards that are not melded (in at least one of the best meld configurations)
     *  The list will be at most MAX_DISCARDS_TO_CONSIDER long
     *  The list will not have any cards which, if discarded, would produce a deadwood improvement of less than
     *     MAX_DEADWOOD_DIFFERENCE + [best possible improvement]
     * @param state the current game state
     * @return the discard metrics without a valid score (since we are not looking at the next draw card yet)
     */
    private static ArrayList<DiscardMetric> getPossibleDiscards(State state) {
        ArrayList<Card> cards = MyGinRummyUtil.bitstringToCards(state.getHand());

        ArrayList<DiscardMetric> metrics = new ArrayList<>();
        // Check for gin...
        for (Card discard: cards) {
            if (discard.getId() != state.getFaceUp()) {
                @SuppressWarnings("unchecked")
                ArrayList<Card> nextHand = (ArrayList<Card>) cards.clone();
                nextHand.remove(discard);
                ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets = GinRummyUtil.cardsToBestMeldSets(nextHand);
                int deadwood = bestMeldSets.isEmpty() ? GinRummyUtil.getDeadwoodPoints(nextHand)
                        : GinRummyUtil.getDeadwoodPoints(bestMeldSets.get(0), nextHand);
                metrics.add(new DiscardMetric(discard, deadwood, nextHand));
            }
        }
        metrics.sort((DiscardMetric o1, DiscardMetric o2) -> o1.immediateDeadwood - o2.immediateDeadwood);
        int bestDeadwood = metrics.get(0).immediateDeadwood;
        if (bestDeadwood == 0) {
            // Gin is possible!
            while (metrics.size() > 1) metrics.remove(metrics.size()-1);
            return metrics;
        }

        ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets = GinRummyUtil.cardsToBestMeldSets(cards);
        if (bestMeldSets.isEmpty()) {
            for (DiscardMetric dm: metrics) dm.alwaysMelded = false;
        }
        else {
            for (int i = 0; i < bestMeldSets.size(); i++) {
                HashSet<Card> melded = new HashSet<>();
                for (int j = 0; j < bestMeldSets.get(i).size(); j++) {
                    for (int k = 0; k < bestMeldSets.get(i).get(j).size(); k++) {
                        melded.add(bestMeldSets.get(i).get(j).get(k));
                    }
                }
                for (DiscardMetric dm: metrics) {
                    if (!melded.contains(dm.discard)) dm.alwaysMelded = false;
                }
            }
        }

        // Remove bad discard choices
        while (metrics.size() > MAX_DISCARDS_TO_CONSIDER ||
                metrics.get(metrics.size()-1).immediateDeadwood > bestDeadwood + MAX_DEADWOOD_DIFFERENCE) {
            metrics.remove(metrics.size()-1);
        }
        metrics.removeIf(dm -> dm.alwaysMelded);
        return metrics;
    }


    /**
     * Estimate the deadwood of an 11-card hand, but making melds out of the 11 cards,
     * and then discarding the highest value deadwood card
     * @param cards
     * @return
     */
    static int estimateBestDeadwoodAfterDiscard(ArrayList<Card> cards) {
        ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets = GinRummyUtil.cardsToBestMeldSets(cards);
        HashSet<Card> melded = new HashSet<>();
        if (!bestMeldSets.isEmpty()) {
            for (int i = 0; i < bestMeldSets.get(0).size(); i++) {
                for (int j = 0; j < bestMeldSets.get(0).get(i).size(); j++) {
                    melded.add(bestMeldSets.get(0).get(i).get(j));
                }
            }
        }
        int maxCard = 0;
        int deadwood = 0;
        for (Card card: cards) {
            if (!melded.contains(card)) {
                int d = GinRummyUtil.getDeadwoodPoints(card);
                deadwood += d;
                maxCard = Math.max(maxCard, d);
            }
        }
        return deadwood - maxCard;

    }

    /**
     * Get metrics that can be used to evaluate all discards
     * @param state the current game state
     * @return
     */
    public static ArrayList<DiscardMetric> getDiscardMetrics(State state) {
        // Get potential discards
        ArrayList<DiscardMetric> metrics = getPossibleDiscards(state);
        if (metrics.size() == 1) return metrics;

        for (DiscardMetric dm : metrics) {
            int count = 0;		// count of total draw cards
            double goodWeight = 0;  // count of draw cards that I would want to pick up face up
            double totalWeight = 0;  // count of draw cards that I would want to pick up face up
            int[] deadwood = new int[52]; // deadwood after each draw card
            for (int c = 0; c < 52; c++) {
                long cardBitstring = 1L << c;
                if ((cardBitstring & state.getUnseen()) != 0) {
                    count++;
                    Card card = Card.getCard(c);
                    dm.hand.add(card);
                    dm.deadwood.add(estimateBestDeadwoodAfterDiscard(dm.hand));
                    dm.hand.remove(dm.hand.size() - 1);
                }
            }
        }

        double[] probTurns = new double[EXTRAPOLATE_TO_TURNS + 1];
        double sum = 0;
        if (state.getTurn() + 1 >= countTurns.length) {
            probTurns[0] = 1;
        }
        else {
            for (int i = 0; i < EXTRAPOLATE_TO_TURNS; i++) {
                double p = 0;
                if (i + state.getTurn() + 1 < countTurns.length) {
                    p = (countTurns[i + state.getTurn() + 1] - countTurns[i + state.getTurn()])/countTurns[state.getTurn()];
                }
                else
                    break;
                probTurns[i] = p;
                sum += p;
            }
            probTurns[EXTRAPOLATE_TO_TURNS] = 1 - sum;
        }

        // Score each discard
        for (DiscardMetric dm: metrics) {
            dm.score = probTurns[0] * dm.immediateDeadwood;

            int scenariosCounted = 0;
            double dwSum = 0;
            Collections.sort(dm.deadwood);
            for (int i = EXTRAPOLATE_TO_TURNS; i >= 1; i--) {
                double cardsSeen = i * DEADWOOD_W;

                while (scenariosCounted < Math.max(1.0, dm.deadwood.size() /cardsSeen)) {
                    dwSum += dm.deadwood.get(scenariosCounted);
                    scenariosCounted++;
                }

                dm.score += probTurns[i] * (dwSum / scenariosCounted);
            }

            double oppEv = dm.getExpectedOpponentImprovement(state);
            dm.score += oppEv;
        }
        return metrics;
    }

    // Create an array of cards from a space separated string representation
    public static Card[] getCards(String description) {
        String[] tokens = description.split(" ");
        Card[] retVal = new Card[tokens.length];
        for (int i = 0; i < tokens.length; i++) {
            retVal[i] = getCard(tokens[i]);
        }
        return retVal;
    }

    // Return the card corresponding to the string representation
    public static Card getCard(String description) {
        int suit = 0;
        while (!Card.suitNames[suit].equals(description.substring(1,2))) {
            suit++;
        }
        int rank = 0;
        while (!Card.rankNames[rank].equals(description.substring(0,1))) {
            rank++;
        }
        return Card.getCard(rank, suit);
    }

    // Test routine
    public static void main(String[] args) {
        GinRummyAndTonic_v5 agent = new GinRummyAndTonic_v5();
        agent.startGame(0,0,getCards("JD, 8S, QC, AS, 3H, 2D, 7D, KS, 6C, 4C"));

        agent.reportDraw(0, getCard("6H"));
        agent.reportDiscard(0, getCard("QC"));

        agent.reportDraw(1, null); // unseen 6D
        agent.reportDiscard(1, getCard("KH"));

        agent.reportDraw(0, getCard("3S"));
        System.out.println("\nScenario 1 (page 1 of analysis)");
        System.out.println("[AS, 2D, 3H, 3S, 4C, 6C, 6H, 7D, 8S, JD, KS] ");
        evaluateDiscards(agent);
        agent.reportDiscard(0, getCard("JD"));

        agent.reportDraw(1, null); // unseen AC
        agent.reportDiscard(1, getCard("TC"));

        agent.reportDraw(0, getCard("2S"));
        agent.reportDiscard(0, getCard("KS"));

        agent.reportDraw(1, null); // unseen 7S
        agent.reportDiscard(1, getCard("9H"));

        agent.reportDraw(0, getCard("7H"));
        System.out.println("\nScenario 2 (page 1 of analysis)");
        System.out.println("[[AS, 2S, 3S], [2D, 3H, 4C, 6C, 6H, 7D, 7H, 8S]] ");
        evaluateDiscards(agent);
        agent.reportDiscard(0, getCard("8S"));

        agent.startGame(0, 1, getCards("6C, 4H, 3D, AD, 6H, QC, KH, JS, 4D, 5S"));
        agent.reportDraw(1, getCard("2H"));
        agent.reportDiscard(1, getCard("9S"));

        agent.reportDraw(0, getCard("5C"));
        agent.reportDiscard(0, getCard("KH"));

        agent.reportDraw(1, null); // unseen TD
        agent.reportDiscard(1, getCard("8C"));

        agent.reportDraw(0, getCard("8S"));
        System.out.println("\nScenario 3 (page 2 of analysis)");
        System.out.println("[AD, 3D, 4H, 4D, 5C, 5S, 6C, 6H, 8S, JS, QC]");
        evaluateDiscards(agent);
        agent.reportDiscard(0, getCard("JS"));

        agent.startGame(0, 0, getCards("JS, TD, AD, 7S, 3C, KC, TS, 9H, QS, 2S"));

        agent.reportDraw(0, getCard("8H"));
        agent.reportDiscard(0, getCard("KC"));

        agent.reportDraw(1, getCard("KC"));
        agent.reportDiscard(1, getCard("JD"));

        agent.reportDraw(0, getCard("9C"));
        agent.reportDiscard(0, getCard("TD"));

        agent.reportDraw(1, null); // unseen 4C
        agent.reportDiscard(1, getCard("KS"));

        agent.reportDraw(0, getCard("KS"));
        System.out.println("\nScenario 4 (page 3 of analysis)");
        System.out.println("[[TS, JS, QS, KS], [AD, 2S, 3C, 7S, 8H, 9C, 9H]]");
        evaluateDiscards(agent);
        agent.reportDiscard(0, getCard("9C"));

        agent.startGame(0, 0, getCards("AD, QD, 3S, 2D, 4S, 4C, QH, 8D, JS, 2S"));
        agent.reportDiscard(1, getCard("7S"));

        agent.reportDraw(1, null); // unseen 9S
        agent.reportDiscard(1, getCard("TD"));

        agent.reportDraw(0, getCard("JH"));
        agent.reportDiscard(0, getCard("QD"));

        agent.reportDraw(1, null); // unseen 2C
        agent.reportDiscard(1, getCard("8S"));

        agent.reportDraw(0, getCard("8S"));
        System.out.println("\nScenario 5 (page 3 of analysis)");
        System.out.println("[[2S, 3S, 4S], [AD, 2D, 4C, 8D, 8S, JH, JS, QH]]");
        evaluateDiscards(agent);
        agent.reportDiscard(0, getCard("QH"));

        agent.reportDraw(1, null); // unseen QC
        agent.reportDiscard(1, getCard("QC"));

        agent.reportDraw(0, getCard("KC"));
        agent.reportDiscard(0, getCard("KC"));

        agent.reportDraw(1, null); // unseen 8H
        agent.reportDiscard(1, getCard("7D"));

        agent.reportDraw(0, getCard("7H"));
        System.out.println("\nScenario 6 (page 3 of analysis)");
        System.out.println("[[2S, 3S, 4S], [AD, 2D, 4C, 7H, 8S, 8D, JS, JH]]");
        evaluateDiscards(agent);


        agent.startGame(0,0,getCards("6H, TD, 8C, 6C, TH, 7H, 7D, 2C, KD, JD"));

        agent.reportDiscard(1, getCard("9H"));

        agent.reportDraw(1, null); // unseen 3H
        agent.reportDiscard(1, getCard("QS"));

        agent.reportDraw(0, getCard("9C"));
        agent.reportDiscard(0, getCard("KD"));

        agent.reportDraw(1, null); // unseen AD
        agent.reportDiscard(1, getCard("JH"));

        agent.reportDraw(0, getCard("KH"));
        agent.reportDiscard(0, getCard("KH"));

        agent.reportDraw(1, null); // unseen JS
        agent.reportDiscard(1, getCard("8H"));

        agent.reportDraw(0, getCard("8H"));
        System.out.println("\nScenario 6 (page 3 of analysis)");
        System.out.println("[[6H, 7H, 8H], [2C, 6C, 7D, 8C, 9C, TH, TD, JD]]");
        evaluateDiscards(agent);

        agent.reportDiscard(0, getCard("JD"));


        agent.startGame(0,0,getCards("AS, 2C, 3D, 4H, 5S, 6C, 7D, 8H, 9C, QS, QC"));
        System.out.println("\nScenario Duo");
        System.out.println("AS, 2C, 3D, 4H, 5S, 6C, 7D, 8H, 9C, QS, QC");
        evaluateDiscards(agent);

        agent.startGame(0,0,getCards("AS, 2C, 3D, 4H, 5S, 6C, 7D, 8H, JC, JS, QC"));
        System.out.println("\nScenario Trio");
        System.out.println("AS, 2C, 3D, 4H, 5S, 6C, 7D, 8H, JC, JS, QC");
        evaluateDiscards(agent);


        agent.startGame(0,0,getCards("AS, 2C, 3D, 4H, 5S, 6C, 7D, JC, JS, QC, QS"));
        System.out.println("\nScenario Quad");
        System.out.println("AS, 2C, 3D, 4H, 5S, 6C, 7D, JC, JS, QC, QS");
        evaluateDiscards(agent);

        agent.startGame(0,0,getCards("AS, 2S, 3S, 4H, 5H, 6H, 7H, JC, JS, JD, JH"));
        System.out.println("\nAll in melds");
        System.out.println("AS, 2S, 3S, 4H, 5H, 6H, 7H, JC, JS, JD, JH");
        evaluateDiscards(agent);
    }

    static void evaluateDiscards(GinRummyAndTonic_v5 agent) {
        // Simulate x turns into the future
        ArrayList<DiscardMetric> metrics = getDiscardMetrics(agent.state);

        for (int i = 0; i < metrics.size(); i++) {
            System.out.print(metrics.get(i).discard);
            System.out.println("\t" + metrics.get(i).score);
        }

    }

    void updateOpponentStats(ArrayList<Card> opponentCards) {
        synchronized(GinRummyAndTonic_v5.class) {
            ArrayList<DiscardMetric> metrics = getDiscardMetrics(state);

            ArrayList<ArrayList<ArrayList<Card>>> bestMeldSets = GinRummyUtil.cardsToBestMeldSets(opponentCards);
            int oppDeadwood = bestMeldSets.isEmpty() ? GinRummyUtil.getDeadwoodPoints(opponentCards)
                    : GinRummyUtil.getDeadwoodPoints(bestMeldSets.get(0), opponentCards);

            for (DiscardMetric dm: metrics) {
                double oppEv = dm.getExpectedOpponentImprovement(state);
                opponentCards.add(dm.discard);
                int oppNewDeadwood = estimateBestDeadwoodAfterDiscard(opponentCards);
                double improvement = oppDeadwood - oppNewDeadwood;
                int ndx = dm.getIndex();
                opponentExpectedImprovement[ndx] = (opponentExpectedImprovement[ndx] * opponentCounts[ndx] + improvement) / (opponentCounts[ndx]+1);
                opponentCounts[ndx]++;
                opponentCards.remove(opponentCards.size() - 1);
            }
        }
    }

    static synchronized void loadOpponentStats() {
        try {
            Scanner sc = new Scanner(new File("opponentEV.txt"));
            int ndx = sc.nextInt();
            while (ndx != -1) {
                opponentExpectedImprovement[ndx] = sc.nextDouble();
                ndx = sc.nextInt();
            }
            while (sc.hasNext()) {
                ndx = sc.nextInt();
                opponentCounts[ndx] = sc.nextInt();

            }
	    	/*
	    	int n = sc.nextInt();
	    	for (int i = 0; i < n; i++) {
	    		opponentExpectedImprovement[i] = sc.nextDouble();
	    	}
	    	n = sc.nextInt();
	    	for (int i = 0; i < n; i++) {
	    		opponentCounts[i] = sc.nextInt();
	    	}*/
            sc.close();
        }
        catch (Exception e) {
            System.err.println("Error loading stats " + e);
        }
    }

    static synchronized void writeOpponentStats() {
        try {
            PrintWriter pw = new PrintWriter("opponentEV.txt");
            for (int i = 0; i < opponentExpectedImprovement.length; i++) {
                if (opponentExpectedImprovement[i] > 0) {
                    pw.println(i + "\t" + opponentExpectedImprovement[i]);
                }
            }
            pw.println(-1);
            for (int i = 0; i < opponentCounts.length; i++) {
                if (opponentCounts[i] > 0) {
                    pw.println(i + "\t" + opponentCounts[i]);
                }
            }
            pw.close();
        }
        catch (Exception e) {
            System.err.println("Error writing stats " + e.getMessage());
        }
    }
}
